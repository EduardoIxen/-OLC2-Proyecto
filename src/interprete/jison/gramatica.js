/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,35],$V2=[1,23],$V3=[1,24],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,33],$V9=[1,36],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[2,5,28,33,34,36,38,53,56,60,62,63,64,65,69,70,71,74,84,85,86,87,88],$Vk=[2,42],$Vl=[1,46],$Vm=[1,60],$Vn=[1,62],$Vo=[1,61],$Vp=[1,63],$Vq=[1,64],$Vr=[1,93],$Vs=[1,77],$Vt=[1,82],$Vu=[1,91],$Vv=[1,90],$Vw=[1,74],$Vx=[1,75],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[2,5,26,28,31,32,33,34,36,38,42,45,53,55,56,60,61,62,63,64,65,69,70,71,74,84,85,86,87,88,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115],$VG=[38,41,83],$VH=[2,111],$VI=[2,5,28,33,34,36,38,53,55,56,60,62,63,64,65,69,70,71,74,84,85,86,87,88],$VJ=[2,5,26,28,33,34,36,38,45,53,55,56,60,62,63,64,65,69,70,71,74,84,85,86,87,88],$VK=[2,77],$VL=[1,101],$VM=[2,5,26,28,33,34,36,38,53,55,56,60,62,63,64,65,69,70,71,74,84,85,86,87,88],$VN=[1,112],$VO=[1,113],$VP=[1,114],$VQ=[1,115],$VR=[1,116],$VS=[1,121],$VT=[1,122],$VU=[1,123],$VV=[1,124],$VW=[1,125],$VX=[1,126],$VY=[1,127],$VZ=[1,128],$V_=[1,129],$V$=[1,130],$V01=[1,131],$V11=[1,132],$V21=[1,133],$V31=[1,134],$V41=[1,135],$V51=[1,144],$V61=[31,45],$V71=[2,5,26,28,31,32,33,34,36,38,42,45,53,55,56,60,61,62,63,64,65,69,70,71,74,84,85,86,87,88,111,112],$V81=[1,196],$V91=[2,5,26,28,31,32,33,34,36,38,41,42,45,53,55,56,60,61,62,63,64,65,69,70,71,74,84,85,86,87,88,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115],$Va1=[2,5,26,28,31,32,33,34,36,38,42,45,53,55,56,60,61,62,63,64,65,69,70,71,74,83,84,85,86,87,88,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115],$Vb1=[1,206],$Vc1=[1,240],$Vd1=[1,221],$Ve1=[2,5,26,28,31,32,33,34,36,38,42,45,53,55,56,60,61,62,63,64,65,69,70,71,74,84,85,86,87,88,100,101,105,106,107,108,109,110,111,112,114,115],$Vf1=[2,5,26,28,31,32,33,34,36,38,42,45,53,55,56,60,61,62,63,64,65,69,70,71,74,84,85,86,87,88,105,106,107,108,109,110,111,112,114,115],$Vg1=[33,45],$Vh1=[1,257],$Vi1=[1,279],$Vj1=[1,278],$Vk1=[33,60,62],$Vl1=[2,5,26,28,33,34,36,38,42,45,53,55,56,60,62,63,64,65,69,70,71,74,84,85,86,87,88],$Vm1=[42,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"imprimir_instr":7,"fin_instr":8,"declaracion_instr":9,"asignacion_instr":10,"if_instr":11,"switch_instr":12,"while_instr":13,"break_instr":14,"continue_instr":15,"return_instr":16,"do_while_instr":17,"funcion_instr":18,"llamada_instr":19,"main_instr":20,"for_instr":21,"incre_decre_instr":22,"declaracion_array_instr":23,"struct_instr":24,"asignacion_struct":25,"tk_puntocoma":26,"instruccion2":27,"RVOID":28,"RMAIN":29,"tk_para":30,"tk_parc":31,"tk_llavea":32,"tk_llavec":33,"RPRINTLN":34,"expresion":35,"RPRINT":36,"TIPO":37,"identificador":38,"tk_igual":39,"LISTA_ID":40,"tk_cora":41,"tk_corc":42,"valores_array":43,"lista_valores_array":44,"tk_coma":45,"valores":46,"assign_array_instr":47,"list_position":48,"expression_acces":49,"tk_masmas":50,"tk_menosmenos":51,"l_incre_decre_instr":52,"RIF":53,"BLOCK_IF":54,"RELSE":55,"RSWITCH":56,"list_case":57,"default_intr":58,"case_instr":59,"RCASE":60,"tk_dospuntos":61,"RDEFAULT":62,"RWHILE":63,"RDO":64,"RFOR":65,"declaracion_for":66,"asignacion_for":67,"RIN":68,"RBREAK":69,"RCONTINUE":70,"RRETURN":71,"ternario_instr":72,"tk_interrogacion":73,"RSTRUCT":74,"lista_struct":75,"LIST_STRUCT":76,"parametros_struct":77,"parametro_struct":78,"acceso_struct":79,"LIST_ACCES_STRUCTS":80,"modificar_acceso_struct":81,"LIST_ACCES_STRUCT":82,"tk_punto":83,"RINT":84,"RDOUBLE":85,"RBOOLEAN":86,"RCHAR":87,"RSTRING":88,"parametros":89,"parametro":90,"parametros_llamada":91,"nativas_instr":92,"RTOLOWERCASE":93,"RTOUPPERCASE":94,"RPARSE":95,"RLENGTH":96,"RCARACTEROFPOSITION":97,"RSUBSTRING":98,"parametro_llamada":99,"tk_mas":100,"tk_menos":101,"tk_por":102,"tk_dividido":103,"tk_modulo":104,"tk_menorque":105,"tk_mayorque":106,"tk_menorigual":107,"tk_mayorigual":108,"tk_dobleigual":109,"tk_diferente":110,"tk_and":111,"tk_or":112,"tk_not":113,"tk_concatenacion":114,"tk_repeticion":115,"RENTERO":116,"RDECIMAL":117,"RCARACTER":118,"RCADENA":119,"RTRUE":120,"RFALSE":121,"RNULL":122,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",26:"tk_puntocoma",28:"RVOID",29:"RMAIN",30:"tk_para",31:"tk_parc",32:"tk_llavea",33:"tk_llavec",34:"RPRINTLN",36:"RPRINT",38:"identificador",39:"tk_igual",41:"tk_cora",42:"tk_corc",45:"tk_coma",50:"tk_masmas",51:"tk_menosmenos",53:"RIF",55:"RELSE",56:"RSWITCH",60:"RCASE",61:"tk_dospuntos",62:"RDEFAULT",63:"RWHILE",64:"RDO",65:"RFOR",68:"RIN",69:"RBREAK",70:"RCONTINUE",71:"RRETURN",73:"tk_interrogacion",74:"RSTRUCT",83:"tk_punto",84:"RINT",85:"RDOUBLE",86:"RBOOLEAN",87:"RCHAR",88:"RSTRING",93:"RTOLOWERCASE",94:"RTOUPPERCASE",95:"RPARSE",96:"RLENGTH",97:"RCARACTEROFPOSITION",98:"RSUBSTRING",100:"tk_mas",101:"tk_menos",102:"tk_por",103:"tk_dividido",104:"tk_modulo",105:"tk_menorque",106:"tk_mayorque",107:"tk_menorigual",108:"tk_mayorigual",109:"tk_dobleigual",110:"tk_diferente",111:"tk_and",112:"tk_or",113:"tk_not",114:"tk_concatenacion",115:"tk_repeticion",116:"RENTERO",117:"RDECIMAL",118:"RCARACTER",119:"RCADENA",120:"RTRUE",121:"RFALSE",122:"RNULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[27,2],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,2],[27,1],[27,1],[27,2],[27,2],[27,2],[27,2],[27,2],[8,1],[8,0],[20,7],[7,4],[7,4],[9,4],[9,2],[23,6],[43,3],[43,2],[44,3],[44,1],[46,1],[46,1],[47,2],[48,2],[48,1],[49,3],[10,3],[22,2],[22,2],[52,2],[52,2],[11,5],[11,7],[11,7],[54,3],[54,1],[12,8],[12,7],[12,7],[57,2],[57,1],[59,4],[58,3],[40,3],[40,1],[13,7],[17,9],[21,11],[21,7],[67,1],[67,1],[66,1],[66,1],[66,1],[14,2],[15,2],[16,3],[16,2],[72,7],[24,5],[75,3],[75,1],[76,2],[76,2],[25,7],[77,3],[77,1],[78,1],[79,2],[81,3],[80,2],[80,1],[82,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[18,7],[18,8],[89,3],[89,1],[90,2],[19,3],[19,4],[19,1],[92,5],[92,5],[92,6],[92,5],[92,6],[92,8],[91,3],[91,1],[99,1],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,2],[35,3],[35,3],[35,1],[35,3],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
       this.$ = $$[$0-1];
                                                        //var retornoErrores = Object.assign([], listaErrores);
                                                        var retornoErrores = listaErrores;
                                                        listaErrores = [];
                                                        return {instr:this.$, errores:retornoErrores}
                                                
break;
case 2: case 72:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 73:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 15: case 18: case 19: case 20: case 21: case 23: case 24: case 25: case 33: case 36: case 37: case 38: case 39: case 67:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 16: case 17: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 34: case 35: case 68: case 100: case 119: case 128:
 this.$ = $$[$0]; 
break;
case 22: case 40:

                                                listaErrores.push(new Exception("Error Sintactico", "No se esperaba "+yytext, _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 43:
 this.$ = new Main($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 44:
 this.$ = new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 45:
 this.$ = new Print($$[$0-1],   _$[$0-3].first_line, _$[$0-3].first_column);   
break;
case 46:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0],   _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 47:
 this.$ = new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 48:
this.$ = new DeclaracionArray($$[$0-5], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 49: case 58:
this.$ = $$[$0-1];
break;
case 50:
this.$ = [];
break;
case 51:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 52: case 57:
this.$ = [$$[$0]];
break;
case 53: case 54: case 156:
this.$ = $$[$0];
break;
case 56:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 59:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 60:
 this.$= new Incremento($$[$0-1], true, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 61:
 this.$= new Decremento($$[$0-1], true, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 62:
 this.$= new Decremento($$[$0], false, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 63:
 this.$= new Incremento($$[$0], false, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 64:
this.$ = new If($$[$0-2], $$[$0], null, null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 65:
this.$ = new If($$[$0-4], $$[$0-2], $$[$0], null,   _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 66:
this.$ = new If($$[$0-4], $$[$0-2], null, $$[$0],   _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 69:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1],   _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 70:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 71:
this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 74:
this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 75:
this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76: case 98: case 114: case 126:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 77: case 94: case 99: case 104: case 115: case 127:
 this.$=[$$[$0]]; 
break;
case 78:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 79:
 this.$ = new Do_While($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 80:
this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], Tipo.ENTERO, _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 81:
this.$ = new For($$[$0-5], null, $$[$0-3], $$[$0-1], Tipo.STRING, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 82: case 83: case 84: case 85: case 146: case 157: case 158: case 159:
this.$ = $$[$0]; 
break;
case 86:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 87:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 88:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 89:
this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 91:
this.$ = new Ternario($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 92:
this.$ = new DeclaracionStruct($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 93:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 95:
 this.$ = {type: $$[$0-1], name: $$[$0], bool:false}; 
break;
case 96:
 this.$ = {type: $$[$0-1], name: $$[$0], bool:true} ; 
break;
case 97:
this.$ = new AsignacionStruct($$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 101:
this.$ = new AccesoStruct($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 103:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 105:
 this.$ = {id:$$[$0]}; 
break;
case 106:
this.$ = Tipo.ENTERO;  
break;
case 107:
this.$ = Tipo.DECIMAL; 
break;
case 108:
this.$ = Tipo.BOOLEANO;
break;
case 109:
this.$ = Tipo.CARACTER;
break;
case 110:
this.$ = Tipo.STRING;  
break;
case 111:
this.$ = Tipo.VOID;    
break;
case 112:
 this.$ = new Funcion($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 113:
 this.$ = new Funcion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 116:
 this.$ = {tipo: $$[$0-1], identificador: $$[$0]} ;
break;
case 117:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 118:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 120:
 this.$ = new ToLowerCase($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 121:
 this.$ = new ToUpperCase($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 122:
 this.$ = new Parse($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);   
break;
case 123:
 this.$ = new Length($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 124:
 this.$ = new CaracterOfPosition($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 125:
 this.$ = new SubString($$[$0-7], $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 129:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.MAS,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 130:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.RESTA,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 131:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.POR,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 132:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.DIV,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 133:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.MODULO,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 134:
this.$ = new Aritmetica($$[$0], null, Operador_Aritmetico.UMENOS, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 135:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MENORQUE,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 136:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MAYORQUE,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 137:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 138:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 139:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.IGUALACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 140:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 141:
this.$ = new Logica($$[$0-2], $$[$0], Operador_Logico.AND,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 142:
this.$ = new Logica($$[$0-2], $$[$0], Operador_Logico.OR,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 143:
this.$ = new Logica($$[$0], null, Operador_Logico.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 144:
this.$ = new Operador($$[$0-2], $$[$0], Operador_Cadena.CONCATENACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 145:
this.$ = new Operador($$[$0-2], $$[$0], Operador_Cadena.REPETICION,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 147:
this.$ = $$[$0-1]; 
break;
case 148:
this.$ = new Primitivo(Tipo.ENTERO,   $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 149:
this.$ = new Primitivo(Tipo.DECIMAL,  $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 150:
this.$ = new Primitivo(Tipo.CARACTER, $$[$0].slice(1,-1),    _$[$0].first_line, _$[$0].first_column);    
break;
case 151:
this.$ = new Primitivo(Tipo.STRING,   $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 152:
this.$ = new Identificador(           $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 153:
this.$ = new Primitivo(Tipo.BOOLEANO, true,  _$[$0].first_line, _$[$0].first_column);    
break;
case 154:
this.$ = new Primitivo(Tipo.BOOLEANO, false, _$[$0].first_line, _$[$0].first_column);    
break;
case 155:
this.$ = new Primitivo(Tipo.NULO,     "null",  _$[$0].first_line, _$[$0].first_column);    
break;
case 160:
this.$ = new AccesoArreglo($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{1:[3]},{2:$V0,5:[1,43],6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},o($Vj,[2,3]),o($Vj,$Vk,{8:45,26:$Vl}),o($Vj,$Vk,{8:47,26:$Vl}),o($Vj,$Vk,{8:48,26:$Vl}),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,$Vk,{8:49,26:$Vl}),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,$Vk,{8:50,26:$Vl}),o($Vj,$Vk,{8:51,26:$Vl}),o($Vj,$Vk,{8:52,26:$Vl}),o($Vj,$Vk,{8:53,26:$Vl}),{26:[1,54]},{30:[1,55]},{30:[1,56]},{38:[1,57],40:58,41:[1,59],83:$Vm},{30:$Vn,38:[1,65],39:$Vo,50:$Vp,51:$Vq,83:[1,66]},{30:[1,67]},{30:[1,68]},{30:[1,69]},{26:[1,70]},{26:[1,71]},{19:86,22:87,26:[1,73],28:$Vr,30:$Vs,35:72,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{32:[1,94]},o($VF,[2,119]),o($VG,$VH,{29:[1,95]}),{30:[1,96],38:[1,97]},{38:[1,98]},o($VG,[2,106]),o($VG,[2,107]),o($VG,[2,108]),o($VG,[2,109]),o($VG,[2,110]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,4]),o($VI,[2,41]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,15]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),{19:86,22:87,28:$Vr,30:$Vs,35:99,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:100,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VJ,$VK,{30:[1,102],39:$VL}),o($VM,[2,47],{45:[1,103]}),{42:[1,104]},{95:[1,105]},{19:86,22:87,28:$Vr,30:$Vs,35:106,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,31:[1,107],35:110,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,91:108,92:34,99:109,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VF,[2,60]),o($VF,[2,61]),{39:[1,111]},{93:$VN,94:$VO,96:$VP,97:$VQ,98:$VR},{19:86,22:87,28:$Vr,30:$Vs,35:117,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:118,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:119,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VI,[2,87]),o($VI,[2,88]),{26:[1,120],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},o($VI,[2,90]),{19:86,22:87,28:$Vr,30:$Vs,35:136,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:137,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VF,[2,146]),{19:86,22:87,28:$Vr,30:$Vs,35:138,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VF,[2,148]),o($VF,[2,149]),o($VF,[2,150]),o($VF,[2,151]),o($VF,[2,152],{48:139,80:140,49:142,82:143,30:$Vn,41:$V51,50:$Vp,51:$Vq,83:[1,141]}),o($VF,[2,153]),o($VF,[2,154]),o($VF,[2,155]),o($VF,[2,156]),o($VF,[2,157]),o($VF,[2,158]),o($VF,[2,159]),{38:[1,145]},{38:[1,146]},{83:$Vm},o([38,83],$VH),{2:$V0,4:147,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{30:[1,148]},{9:150,10:151,28:$Vr,37:153,38:[1,152],66:149,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi},{68:[1,154]},{32:[1,155]},{31:[1,156],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},{31:[1,157],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},{19:86,22:87,28:$Vr,30:$Vs,35:158,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:$Vr,31:[1,159],37:162,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,89:160,90:161},{38:[1,163]},{38:[1,164]},{30:[1,165]},o([2,5,26,28,31,33,34,36,38,53,55,56,60,62,63,64,65,69,70,71,74,84,85,86,87,88],[2,59],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41}),o($VF,[2,117]),{31:[1,166],45:[1,167]},o($V61,[2,127]),o($V61,[2,128],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41}),{38:[1,168]},{30:[1,169]},{30:[1,170]},{30:[1,171]},{30:[1,172]},{30:[1,173]},{31:[1,174],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},{31:[1,175],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},{31:[1,176],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},o($VI,[2,89]),{19:86,22:87,28:$Vr,30:$Vs,35:177,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:178,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:179,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:180,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:181,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:182,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:183,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:184,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:185,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:186,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:187,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:188,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:189,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:190,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:191,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VF,[2,134]),o($V71,[2,143],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,114:$V31,115:$V41}),{31:[1,192],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},o($VF,[2,160],{49:193,41:$V51}),o($VF,[2,101],{82:194,83:[1,195]}),{38:$V81,93:$VN,94:$VO,96:$VP,97:$VQ,98:$VR},o($V91,[2,57]),o($Va1,[2,104]),{19:86,22:87,28:$Vr,30:$Vs,35:197,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VF,[2,62]),o($VF,[2,63]),{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,33:[1,198],34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{31:[1,199]},{26:[1,200]},{26:[2,84]},{26:[2,85]},{26:[2,86],39:$Vo},{38:[1,201],40:58},{19:86,22:87,28:$Vr,30:$Vs,35:202,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{28:$Vr,37:205,38:$Vb1,75:203,76:204,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi},o($VM,[2,44]),o($VM,[2,45]),o($VM,[2,46],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41}),{32:[1,207]},{31:[1,208],45:[1,209]},o($V61,[2,115]),{38:[1,210]},o($VJ,[2,76]),{39:[1,211]},{19:86,22:87,28:$Vr,30:$Vs,35:212,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VF,[2,118]),{19:86,22:87,28:$Vr,30:$Vs,35:110,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,99:213,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{30:[1,214]},{31:[1,215]},{31:[1,216]},{31:[1,217]},{19:86,22:87,28:$Vr,30:$Vs,35:218,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{19:86,22:87,28:$Vr,30:$Vs,35:219,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{2:$Vc1,7:223,9:224,10:225,12:226,13:227,14:228,15:229,16:230,17:231,18:232,19:233,20:234,21:235,22:236,23:237,24:238,25:239,27:222,28:$V1,32:$Vd1,34:$V2,36:$V3,37:25,38:$V4,54:220,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{32:[1,241]},{32:[1,242]},o($Ve1,[2,129],{102:$VU,103:$VV,104:$VW}),o($Ve1,[2,130],{102:$VU,103:$VV,104:$VW}),o($VF,[2,131]),o($VF,[2,132]),o($VF,[2,133]),o($Vf1,[2,135],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW}),o($Vf1,[2,136],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW}),o($Vf1,[2,137],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW}),o($Vf1,[2,138],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW}),o($Vf1,[2,139],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW}),o($Vf1,[2,140],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW}),o($V71,[2,141],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,114:$V31,115:$V41}),o([2,5,26,28,31,32,33,34,36,38,42,45,53,55,56,60,61,62,63,64,65,69,70,71,74,84,85,86,87,88,112],[2,142],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,114:$V31,115:$V41}),o([2,5,26,28,31,32,33,34,36,38,42,45,53,55,56,60,61,62,63,64,65,69,70,71,74,84,85,86,87,88,111,112,114],[2,144],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,115:$V41}),o([2,5,26,28,31,32,33,34,36,38,42,45,53,55,56,60,61,62,63,64,65,69,70,71,74,84,85,86,87,88,111,112,114,115],[2,145],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01}),o($VF,[2,147],{73:[1,243]}),o($V91,[2,56]),o($Va1,[2,103]),{38:$V81},o($Va1,[2,105]),{42:[1,244],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},{63:[1,245]},{32:[1,246]},{19:86,22:87,28:$Vr,30:$Vs,35:247,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o([26,45],$VK,{39:$VL}),{32:[1,248],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},{33:[1,249],45:[1,250]},o($Vg1,[2,94]),{38:[1,251]},{38:[1,252]},{2:$V0,4:253,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{32:[1,254]},{28:$Vr,37:162,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,90:255},o($V61,[2,116]),{41:$Vh1,43:256},{31:[1,258],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},o($V61,[2,126]),{19:86,22:87,28:$Vr,30:$Vs,35:261,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,77:259,78:260,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VF,[2,120]),o($VF,[2,121]),o($VF,[2,123]),{31:[1,262],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},{45:[1,263],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},o($Vj,[2,64],{55:[1,264]}),{2:$V0,4:265,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},o($VI,[2,68]),o($VI,$Vk,{8:266,26:$Vl}),o($VI,$Vk,{8:267,26:$Vl}),o($VI,$Vk,{8:268,26:$Vl}),o($VI,[2,26]),o($VI,[2,27]),o($VI,[2,28]),o($VI,[2,29]),o($VI,[2,30]),o($VI,[2,31]),o($VI,[2,32]),o($VI,$Vk,{8:269,26:$Vl}),o($VI,[2,34]),o($VI,[2,35]),o($VI,$Vk,{8:270,26:$Vl}),o($VI,$Vk,{8:271,26:$Vl}),o($VI,$Vk,{8:272,26:$Vl}),o($VI,$Vk,{8:273,26:$Vl}),{26:[1,274]},{57:275,58:276,59:277,60:$Vi1,62:$Vj1},{2:$V0,4:280,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{19:86,22:87,28:$Vr,30:$Vs,35:281,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($V91,[2,58]),{30:[1,282]},{2:$V0,4:283,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{26:[1,284],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},{2:$V0,4:285,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},o($VM,[2,92]),{28:$Vr,37:205,38:$Vb1,76:286,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi},o($Vg1,[2,95]),o($Vg1,[2,96]),{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,33:[1,287],34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{2:$V0,4:288,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},o($V61,[2,114]),o($VM,[2,48]),{19:86,22:87,28:$Vr,30:$Vs,35:293,37:92,38:$Vt,41:$Vh1,42:[1,290],43:292,44:289,46:291,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($VF,[2,122]),{31:[1,294],45:[1,295]},o($V61,[2,99]),o($V61,[2,100],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41}),o($VF,[2,124]),{19:86,22:87,28:$Vr,30:$Vs,35:296,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{2:$Vc1,7:223,9:224,10:225,11:298,12:226,13:227,14:228,15:229,16:230,17:231,18:232,19:233,20:234,21:235,22:236,23:237,24:238,25:239,27:222,28:$V1,32:$Vd1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,54:297,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,33:[1,299],34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},o($VI,[2,23]),o($VI,[2,24]),o($VI,[2,25]),o($VI,[2,33]),o($VI,[2,36]),o($VI,[2,37]),o($VI,[2,38]),o($VI,[2,39]),o($VI,[2,40]),{33:[1,301],58:300,59:302,60:$Vi1,62:$Vj1},{33:[1,303]},o($Vk1,[2,73]),{61:[1,304]},{19:86,22:87,28:$Vr,30:$Vs,35:305,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,33:[1,306],34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{61:[1,307],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},{19:86,22:87,28:$Vr,30:$Vs,35:308,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,33:[1,309],34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{10:311,22:312,38:[1,313],67:310},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,33:[1,314],34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},o($Vg1,[2,93]),o($VI,[2,112]),{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,33:[1,315],34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{42:[1,316],45:[1,317]},o($Vl1,[2,50]),o($Vm1,[2,52]),o($Vm1,[2,53]),o($Vm1,[2,54],{100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41}),o($VM,[2,97]),{19:86,22:87,28:$Vr,30:$Vs,35:261,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,78:318,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{31:[1,319],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},o($Vj,[2,65]),o($Vj,[2,66]),o($VI,[2,67]),{33:[1,320]},o($VI,[2,70]),o($Vk1,[2,72]),o($VI,[2,71]),{2:$V0,4:321,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{61:[1,322],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},o($VI,[2,78]),{19:86,22:87,28:$Vr,30:$Vs,35:323,37:92,38:$Vt,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},{31:[1,324],100:$VS,101:$VT,102:$VU,103:$VV,104:$VW,105:$VX,106:$VY,107:$VZ,108:$V_,109:$V$,110:$V01,111:$V11,112:$V21,114:$V31,115:$V41},o($VI,[2,43]),{31:[1,325]},{31:[2,82]},{31:[2,83]},{39:$Vo,50:$Vp,51:$Vq},o($VI,[2,81]),o($VI,[2,113]),o($Vl1,[2,49]),{19:86,22:87,28:$Vr,30:$Vs,35:293,37:92,38:$Vt,41:$Vh1,43:292,46:326,50:$Vu,51:$Vv,52:88,72:76,79:89,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34,101:$Vw,113:$Vx,116:$Vy,117:$Vz,118:$VA,119:$VB,120:$VC,121:$VD,122:$VE},o($V61,[2,98]),o($VF,[2,125]),o($VI,[2,69]),{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,33:[2,75],34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{2:$V0,4:327,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},o($VF,[2,91]),{26:[1,328]},{32:[1,329]},o($Vm1,[2,51]),o($Vk1,[2,74],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,37:25,92:34,6:44,2:$V0,28:$V1,34:$V2,36:$V3,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi}),o($VI,[2,79]),{2:$V0,4:330,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,28:$V1,33:[1,331],34:$V2,36:$V3,37:25,38:$V4,53:$V5,56:$V6,63:$V7,64:$V8,65:$V9,69:$Va,70:$Vb,71:$Vc,74:$Vd,84:$Ve,85:$Vf,86:$Vg,87:$Vh,88:$Vi,92:34},o($VI,[2,80])],
defaultActions: {43:[2,1],150:[2,84],151:[2,85],311:[2,82],312:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        var listaErrores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/*Comentario de una linea*/
break;
case 2:// comentario multiple líneas
break;
case 3:return 34;
break;
case 4:return 36;
break;
case 5:return 53;
break;
case 6:return 55;
break;
case 7:return 56;
break;
case 8:return 60;
break;
case 9:return 62;
break;
case 10:return 69;
break;
case 11:return 63;
break;
case 12:return 64;
break;
case 13:return 70;
break;
case 14:return 71
break;
case 15:return 'REND';
break;
case 16:return 74;
break;
case 17:return 29;
break;
case 18:return 65;
break;
case 19:return 68;
break;
case 20:return 93;
break;
case 21:return 94;
break;
case 22:return 95;
break;
case 23:return 96;
break;
case 24:return 97;
break;
case 25:return 98;
break;
case 26:return 122;
break;
case 27:return 84;
break;
case 28:return 85;
break;
case 29:return 86;
break;
case 30:return 120;
break;
case 31:return 121;
break;
case 32:return 87;
break;
case 33:return 88;
break;
case 34:return "RVOID";
break;
case 35:return 117;
break;
case 36:return 116;
break;
case 37:return 118;
break;
case 38:return 38;
break;
case 39:return 111
break;
case 40:return 61;
break;
case 41:return 26;
break;
case 42:return 32;
break;
case 43:return 33;
break;
case 44:return 41;
break;
case 45:return "tk_corc"
break;
case 46:return 30;
break;
case 47:return 31;
break;
case 48:return 114;
break;
case 49:return 26;
break;
case 50:return 'tk_dolar';
break;
case 51:return 45;
break;
case 52:return 50;
break;
case 53:return 51;
break;
case 54:return 'tk_numeral';
break;
case 55:return 73;
break;
case 56:return 115;
break;
case 57:return 83;
break;
case 58:return 100;
break;
case 59:return 101;
break;
case 60:return 102;
break;
case 61:return 103;
break;
case 62:return 104;
break;
case 63:return 110;
break;
case 64:return 107;
break;
case 65:return 108;
break;
case 66:return 105;
break;
case 67:return 106;
break;
case 68:return 109;
break;
case 69:return 39;
break;
case 70:return 112;
break;
case 71:return 113;
break;
case 72:cadena="";this.begin("string");
break;
case 73:cadena+=yy_.yytext;
break;
case 74:cadena+="\"";
break;
case 75:cadena+="\n";
break;
case 76:cadena+=" ";
break;
case 77:cadena+="\t";
break;
case 78:cadena+="\\";
break;
case 79:cadena+="\'";
break;
case 80:yy_.yytext=cadena; this.popState(); return 119;
break;
case 81:return 5;
break;
case 82: 
        listaErrores.push(new Exception("Error Lexico", "No se reconoce "+yy_.yytext, yy_.yylloc.first_line,  yy_.yylloc.first_column));
        
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:println\b)/,/^(?:print\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:begin\b)/,/^(?:struct\b)/,/^(?:main\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:parse\b)/,/^(?:length\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:void\b)/,/^(?:[0-9]+(\.[0-9]+)+\b)/,/^(?:[0-9]+\b)/,/^(?:'([^\\\"]|\\.)')/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:&&)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:&)/,/^(?:;)/,/^(?:\$)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:#)/,/^(?:\?)/,/^(?:\^)/,/^(?:\.)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:\|\|)/,/^(?:!)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s+)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\\\')/,/^(?:["])/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[73,74,75,76,77,78,79,80],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}