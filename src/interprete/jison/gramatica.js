/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,24],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[5,20,24,26,29,33,34,38,40,42,43,44,45,46,47,48,49,50,51],$Vg=[2,24],$Vh=[1,33],$Vi=[1,49],$Vj=[1,54],$Vk=[1,47],$Vl=[1,48],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[5,20,24,26,29,31,33,34,38,40,42,43,44,45,46,47,48,49,50,51],$Vu=[5,19,20,24,26,29,31,33,34,38,40,41,42,43,44,45,46,47,48,49,50,51],$Vv=[5,19,20,24,26,29,31,33,34,38,40,42,43,44,45,46,47,48,49,50,51],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[1,74],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,80],$VJ=[1,81],$VK=[1,82],$VL=[5,19,20,23,24,26,29,31,33,34,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67],$VM=[5,19,20,23,24,26,29,31,33,34,38,39,40,42,43,44,45,46,47,48,49,50,51,63,64],$VN=[1,112],$VO=[5,19,20,23,24,26,29,31,33,34,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,57,58,59,60,61,62,63,64,66,67],$VP=[5,19,20,23,24,26,29,31,33,34,38,39,40,42,43,44,45,46,47,48,49,50,51,57,58,59,60,61,62,63,64,66,67],$VQ=[1,135],$VR=[1,134],$VS=[33,38,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"imprimir_instr":7,"fin_instr":8,"declaracion_instr":9,"asignacion_instr":10,"if_instr":11,"switch_instr":12,"while_instr":13,"break_instr":14,"continue_instr":15,"return_instr":16,"do_while_instr":17,"instruccion2":18,"tk_puntocoma":19,"RPRINTLN":20,"tk_para":21,"expresion":22,"tk_parc":23,"RPRINT":24,"TIPO":25,"identificador":26,"tk_igual":27,"LISTA_ID":28,"RIF":29,"BLOCK_IF":30,"RELSE":31,"tk_llavea":32,"tk_llavec":33,"RSWITCH":34,"list_case":35,"default_intr":36,"case_instr":37,"RCASE":38,"tk_dospuntos":39,"RDEFAULT":40,"tk_coma":41,"RWHILE":42,"RDO":43,"RBREAK":44,"RCONTINUE":45,"RRETURN":46,"RINT":47,"RDOUBLE":48,"RBOOLEAN":49,"RCHAR":50,"RSTRING":51,"tk_mas":52,"tk_menos":53,"tk_por":54,"tk_dividido":55,"tk_modulo":56,"tk_menorque":57,"tk_mayorque":58,"tk_menorigual":59,"tk_mayorigual":60,"tk_dobleigual":61,"tk_diferente":62,"tk_and":63,"tk_or":64,"tk_not":65,"tk_concatenacion":66,"tk_repeticion":67,"RENTERO":68,"RDECIMAL":69,"RCARACTER":70,"RCADENA":71,"RTRUE":72,"RFALSE":73,"RNULL":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"tk_puntocoma",20:"RPRINTLN",21:"tk_para",23:"tk_parc",24:"RPRINT",26:"identificador",27:"tk_igual",29:"RIF",31:"RELSE",32:"tk_llavea",33:"tk_llavec",34:"RSWITCH",38:"RCASE",39:"tk_dospuntos",40:"RDEFAULT",41:"tk_coma",42:"RWHILE",43:"RDO",44:"RBREAK",45:"RCONTINUE",46:"RRETURN",47:"RINT",48:"RDOUBLE",49:"RBOOLEAN",50:"RCHAR",51:"RSTRING",52:"tk_mas",53:"tk_menos",54:"tk_por",55:"tk_dividido",56:"tk_modulo",57:"tk_menorque",58:"tk_mayorque",59:"tk_menorigual",60:"tk_mayorigual",61:"tk_dobleigual",62:"tk_diferente",63:"tk_and",64:"tk_or",65:"tk_not",66:"tk_concatenacion",67:"tk_repeticion",68:"RENTERO",69:"RDECIMAL",70:"RCARACTER",71:"RCADENA",72:"RTRUE",73:"RFALSE",74:"RNULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[18,2],[18,2],[18,2],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[8,1],[8,0],[7,4],[7,4],[9,4],[9,2],[10,3],[11,5],[11,7],[11,7],[30,3],[30,1],[12,8],[12,7],[12,7],[35,2],[35,1],[37,4],[36,3],[28,3],[28,1],[13,7],[17,9],[14,2],[15,2],[16,3],[25,1],[25,1],[25,1],[25,1],[25,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]; 
break;
case 2: case 38:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 39:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 14: case 15: case 16: case 33:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 17: case 18: case 19: case 20: case 21: case 22: case 34:
 this.$ = $$[$0]; 
break;
case 25:
 this.$ = new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 26:
 this.$ = new Print($$[$0-1],   _$[$0-3].first_line, _$[$0-3].first_column);   
break;
case 27:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0],   _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 28:
 this.$ = new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 29:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 30:
this.$ = new If($$[$0-2], $$[$0], null, null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 31:
this.$ = new If($$[$0-4], $$[$0-2], $$[$0], null,   _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 32:
this.$ = new If($$[$0-4], $$[$0-2], null, $$[$0],   _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 35:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1],   _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 36:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 37:
this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 40:
this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 41:
this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 42:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 43:
 this.$=[$$[$0]]; 
break;
case 44:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 45:
 this.$ = new Do_While($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 46:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 47:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 48:
this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 49:
this.$ = Tipo.ENTERO;  
break;
case 50:
this.$ = Tipo.DECIMAL; 
break;
case 51:
this.$ = Tipo.BOOLEANO;
break;
case 52:
this.$ = Tipo.CARACTER;
break;
case 53:
this.$ = Tipo.STRING;  
break;
case 54:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.MAS,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 55:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.RESTA,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 56:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.POR,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 57:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.DIV,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 58:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.MODULO,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 59:
this.$ = new Aritmetica($$[$0], null, Operador_Aritmetico.UMENOS, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 60:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MENORQUE,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 61:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MAYORQUE,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 62:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 64:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.IGUALACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 65:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 66:
this.$ = new Logica($$[$0-2], $$[$0], Operador_Logico.AND,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
this.$ = new Logica($$[$0-2], $$[$0], Operador_Logico.OR,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 68:
this.$ = new Logica($$[$0], null, Operador_Logico.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 69:
this.$ = new Operador($$[$0-2], $$[$0], Operador_Cadena.CONCATENACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
this.$ = new Operador($$[$0-2], $$[$0], Operador_Cadena.REPETICION,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 71:
this.$ = $$[$0-1]
break;
case 72:
this.$ = new Primitivo(Tipo.ENTERO,   $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 73:
this.$ = new Primitivo(Tipo.DECIMAL,  $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 74:
this.$ = new Primitivo(Tipo.CARACTER, $$[$0].slice(1,-1),    _$[$0].first_line, _$[$0].first_column);    
break;
case 75:
this.$ = new Primitivo(Tipo.STRING,   $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 76:
this.$ = new Identificador(           $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 77:
this.$ = new Primitivo(Tipo.BOOLEANO, true,  _$[$0].first_line, _$[$0].first_column);    
break;
case 78:
this.$ = new Primitivo(Tipo.BOOLEANO, false, _$[$0].first_line, _$[$0].first_column);    
break;
case 79:
this.$ = new Primitivo(Tipo.NULO,     "null",  _$[$0].first_line, _$[$0].first_column);    
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},{1:[3]},{5:[1,30],6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},o($Vf,[2,3]),o($Vf,$Vg,{8:32,19:$Vh}),o($Vf,$Vg,{8:34,19:$Vh}),o($Vf,$Vg,{8:35,19:$Vh}),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),{21:[1,36]},{21:[1,37]},{26:[1,38],28:39},{27:[1,40]},{21:[1,41]},{21:[1,42]},{21:[1,43]},{19:[1,44]},{19:[1,45]},{21:$Vi,22:46,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{32:[1,58]},{26:[2,49]},{26:[2,50]},{26:[2,51]},{26:[2,52]},{26:[2,53]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vt,[2,23]),o($Vf,[2,5]),o($Vf,[2,6]),{21:$Vi,22:59,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:60,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},o($Vu,[2,43],{27:[1,61]}),o($Vv,[2,28],{41:[1,62]}),{21:$Vi,22:63,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:64,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:65,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:66,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},o($Vt,[2,46]),o($Vt,[2,47]),{19:[1,67],52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK},{21:$Vi,22:83,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:84,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:85,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},o($VL,[2,72]),o($VL,[2,73]),o($VL,[2,74]),o($VL,[2,75]),o($VL,[2,76]),o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,79]),{4:86,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},{23:[1,87],52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK},{23:[1,88],52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK},{21:$Vi,22:89,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{26:[1,90]},o($Vv,[2,29],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK}),{23:[1,91],52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK},{23:[1,92],52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK},{23:[1,93],52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK},o($Vt,[2,48]),{21:$Vi,22:94,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:95,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:96,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:97,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:98,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:99,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:100,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:101,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:102,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:103,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:104,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:105,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:106,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:107,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{21:$Vi,22:108,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},o($VL,[2,59]),o($VM,[2,68],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,66:$VJ,67:$VK}),{23:[1,109],52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,33:[1,110],34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},o($Vv,[2,25]),o($Vv,[2,26]),o($Vv,[2,27],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK}),o($Vu,[2,42]),{7:114,9:115,10:116,12:117,13:118,14:119,15:120,16:121,17:122,18:113,20:$V0,24:$V1,25:16,26:$V2,30:111,32:$VN,34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},{32:[1,123]},{32:[1,124]},o($VO,[2,54],{54:$Vy,55:$Vz,56:$VA}),o($VO,[2,55],{54:$Vy,55:$Vz,56:$VA}),o($VL,[2,56]),o($VL,[2,57]),o($VL,[2,58]),o($VP,[2,60],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o($VP,[2,61],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o($VP,[2,62],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o($VP,[2,63],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o($VP,[2,64],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o($VP,[2,65],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA}),o($VM,[2,66],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,66:$VJ,67:$VK}),o([5,19,20,23,24,26,29,31,33,34,38,39,40,42,43,44,45,46,47,48,49,50,51,64],[2,67],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,66:$VJ,67:$VK}),o([5,19,20,23,24,26,29,31,33,34,38,39,40,42,43,44,45,46,47,48,49,50,51,63,64,66],[2,69],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,67:$VK}),o([5,19,20,23,24,26,29,31,33,34,38,39,40,42,43,44,45,46,47,48,49,50,51,63,64,66,67],[2,70],{52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG}),o($VL,[2,71]),{42:[1,125]},o($Vf,[2,30],{31:[1,126]}),{4:127,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},o($Vt,[2,34]),o($Vt,$Vg,{8:128,19:$Vh}),o($Vt,$Vg,{8:129,19:$Vh}),o($Vt,$Vg,{8:130,19:$Vh}),o($Vt,[2,17]),o($Vt,[2,18]),o($Vt,[2,19]),o($Vt,[2,20]),o($Vt,[2,21]),o($Vt,[2,22]),{35:131,36:132,37:133,38:$VQ,40:$VR},{4:136,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},{21:[1,137]},{7:114,9:115,10:116,11:139,12:117,13:118,14:119,15:120,16:121,17:122,18:113,20:$V0,24:$V1,25:16,26:$V2,29:$V3,30:138,32:$VN,34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,33:[1,140],34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},o($Vt,[2,14]),o($Vt,[2,15]),o($Vt,[2,16]),{33:[1,142],36:141,37:143,38:$VQ,40:$VR},{33:[1,144]},o($VS,[2,39]),{39:[1,145]},{21:$Vi,22:146,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,33:[1,147],34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},{21:$Vi,22:148,26:$Vj,53:$Vk,65:$Vl,68:$Vm,69:$Vn,70:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs},o($Vf,[2,31]),o($Vf,[2,32]),o($Vt,[2,33]),{33:[1,149]},o($Vt,[2,36]),o($VS,[2,38]),o($Vt,[2,37]),{4:150,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},{39:[1,151],52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK},o($Vt,[2,44]),{23:[1,152],52:$Vw,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,66:$VJ,67:$VK},o($Vt,[2,35]),{6:31,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,33:[2,41],34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},{4:153,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:$V0,24:$V1,25:16,26:$V2,29:$V3,34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve},{19:[1,154]},o($VS,[2,40],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,25:16,6:31,20:$V0,24:$V1,26:$V2,29:$V3,34:$V4,42:$V5,43:$V6,44:$V7,45:$V8,46:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,51:$Ve}),o($Vt,[2,45])],
defaultActions: {25:[2,49],26:[2,50],27:[2,51],28:[2,52],29:[2,53],30:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/*Comentario de una linea*/
break;
case 2:// comentario multiple líneas
break;
case 3:return 20;
break;
case 4:return 24;
break;
case 5:return 29;
break;
case 6:return 31;
break;
case 7:return 34;
break;
case 8:return 38;
break;
case 9:return 40;
break;
case 10:return 'RPOW';
break;
case 11:return 'RSQRT';
break;
case 12:return 'RSIN';
break;
case 13:return 'RCOS';
break;
case 14:return 'RTAN';
break;
case 15:return 'RLOG10';
break;
case 16:return 44;
break;
case 17:return 42;
break;
case 18:return 43;
break;
case 19:return 45;
break;
case 20:return 46
break;
case 21:return 'REND';
break;
case 22:return 'RSTRUCT';
break;
case 23:return 74;
break;
case 24:return 47;
break;
case 25:return 48;
break;
case 26:return 49;
break;
case 27:return 72;
break;
case 28:return 73;
break;
case 29:return 50;
break;
case 30:return 51;
break;
case 31:return 69;
break;
case 32:return 68;
break;
case 33:return 70;
break;
case 34:return 26;
break;
case 35:return 63
break;
case 36:return 39;
break;
case 37:return 19;
break;
case 38:return 32;
break;
case 39:return 33;
break;
case 40:return 'tk_cora';
break;
case 41:return "tk_corc"
break;
case 42:return 21;
break;
case 43:return 23;
break;
case 44:return 66;
break;
case 45:return 19;
break;
case 46:return 'tk_dolar';
break;
case 47:return 41;
break;
case 48:return 'tk_masmas';
break;
case 49:return 'tk_menosmenos';
break;
case 50:return 'tk_numeral';
break;
case 51:return 'tk_interrogacion';
break;
case 52:return 67;
break;
case 53:return 52;
break;
case 54:return 53;
break;
case 55:return 54;
break;
case 56:return 55;
break;
case 57:return 56;
break;
case 58:return 62;
break;
case 59:return 59;
break;
case 60:return 60;
break;
case 61:return 57;
break;
case 62:return 58;
break;
case 63:return 61;
break;
case 64:return 27;
break;
case 65:return 64;
break;
case 66:return 65;
break;
case 67:cadena="";this.begin("string");
break;
case 68:cadena+=yy_.yytext;
break;
case 69:cadena+="\"";
break;
case 70:cadena+="\n";
break;
case 71:cadena+=" ";
break;
case 72:cadena+="\t";
break;
case 73:cadena+="\\";
break;
case 74:cadena+="\'";
break;
case 75:yy_.yytext=cadena; this.popState(); return 71;
break;
case 76:return 5;
break;
case 77: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:log10\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:begin\b)/i,/^(?:struct\b)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'([^\\\"]|\\.)')/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:&&)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:&)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:#)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74,75],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}