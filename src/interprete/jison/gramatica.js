/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,32],$V2=[1,20],$V3=[1,21],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,30],$V9=[1,33],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[2,5,25,30,31,33,35,41,44,48,50,52,53,54,58,59,60,63,64,65,66,67],$Vj=[2,36],$Vk=[1,42],$Vl=[1,52],$Vm=[1,54],$Vn=[1,53],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,83],$Vs=[1,68],$Vt=[1,73],$Vu=[1,81],$Vv=[1,80],$Vw=[1,65],$Vx=[1,66],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,74],$VD=[1,75],$VE=[1,76],$VF=[2,5,23,25,28,29,30,31,33,35,41,43,44,48,49,50,51,52,53,54,58,59,60,63,64,65,66,67,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95],$VG=[35,72],$VH=[2,79],$VI=[2,5,25,30,31,33,35,41,43,44,48,50,52,53,54,58,59,60,63,64,65,66,67],$VJ=[2,5,23,25,30,31,33,35,41,43,44,48,50,51,52,53,54,58,59,60,63,64,65,66,67],$VK=[2,60],$VL=[1,90],$VM=[2,5,23,25,30,31,33,35,41,43,44,48,50,52,53,54,58,59,60,63,64,65,66,67],$VN=[1,108],$VO=[1,109],$VP=[1,110],$VQ=[1,111],$VR=[1,112],$VS=[1,113],$VT=[1,114],$VU=[1,115],$VV=[1,116],$VW=[1,117],$VX=[1,118],$VY=[1,119],$VZ=[1,120],$V_=[1,121],$V$=[1,122],$V01=[28,51],$V11=[2,5,23,25,28,29,30,31,33,35,41,43,44,48,49,50,51,52,53,54,58,59,60,63,64,65,66,67,91,92],$V21=[1,203],$V31=[1,187],$V41=[2,5,23,25,28,29,30,31,33,35,41,43,44,48,49,50,51,52,53,54,58,59,60,63,64,65,66,67,80,81,85,86,87,88,89,90,91,92,94,95],$V51=[2,5,23,25,28,29,30,31,33,35,41,43,44,48,49,50,51,52,53,54,58,59,60,63,64,65,66,67,85,86,87,88,89,90,91,92,94,95],$V61=[1,229],$V71=[1,228],$V81=[30,48,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"imprimir_instr":7,"fin_instr":8,"declaracion_instr":9,"asignacion_instr":10,"if_instr":11,"switch_instr":12,"while_instr":13,"break_instr":14,"continue_instr":15,"return_instr":16,"do_while_instr":17,"funcion_instr":18,"llamada_instr":19,"main_instr":20,"for_instr":21,"incre_decre_instr":22,"tk_puntocoma":23,"instruccion2":24,"RVOID":25,"RMAIN":26,"tk_para":27,"tk_parc":28,"tk_llavea":29,"tk_llavec":30,"RPRINTLN":31,"expresion":32,"RPRINT":33,"TIPO":34,"identificador":35,"tk_igual":36,"LISTA_ID":37,"tk_masmas":38,"tk_menosmenos":39,"l_incre_decre_instr":40,"RIF":41,"BLOCK_IF":42,"RELSE":43,"RSWITCH":44,"list_case":45,"default_intr":46,"case_instr":47,"RCASE":48,"tk_dospuntos":49,"RDEFAULT":50,"tk_coma":51,"RWHILE":52,"RDO":53,"RFOR":54,"declaracion_for":55,"asignacion_for":56,"RIN":57,"RBREAK":58,"RCONTINUE":59,"RRETURN":60,"ternario_instr":61,"tk_interrogacion":62,"RINT":63,"RDOUBLE":64,"RBOOLEAN":65,"RCHAR":66,"RSTRING":67,"parametros":68,"parametro":69,"parametros_llamada":70,"nativas_instr":71,"tk_punto":72,"RTOLOWERCASE":73,"RTOUPPERCASE":74,"RPARSE":75,"RLENGTH":76,"RCARACTEROFPOSITION":77,"RSUBSTRING":78,"parametro_llamada":79,"tk_mas":80,"tk_menos":81,"tk_por":82,"tk_dividido":83,"tk_modulo":84,"tk_menorque":85,"tk_mayorque":86,"tk_menorigual":87,"tk_mayorigual":88,"tk_dobleigual":89,"tk_diferente":90,"tk_and":91,"tk_or":92,"tk_not":93,"tk_concatenacion":94,"tk_repeticion":95,"RENTERO":96,"RDECIMAL":97,"RCARACTER":98,"RCADENA":99,"RTRUE":100,"RFALSE":101,"RNULL":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"tk_puntocoma",25:"RVOID",26:"RMAIN",27:"tk_para",28:"tk_parc",29:"tk_llavea",30:"tk_llavec",31:"RPRINTLN",33:"RPRINT",35:"identificador",36:"tk_igual",38:"tk_masmas",39:"tk_menosmenos",41:"RIF",43:"RELSE",44:"RSWITCH",48:"RCASE",49:"tk_dospuntos",50:"RDEFAULT",51:"tk_coma",52:"RWHILE",53:"RDO",54:"RFOR",57:"RIN",58:"RBREAK",59:"RCONTINUE",60:"RRETURN",62:"tk_interrogacion",63:"RINT",64:"RDOUBLE",65:"RBOOLEAN",66:"RCHAR",67:"RSTRING",72:"tk_punto",73:"RTOLOWERCASE",74:"RTOUPPERCASE",75:"RPARSE",76:"RLENGTH",77:"RCARACTEROFPOSITION",78:"RSUBSTRING",80:"tk_mas",81:"tk_menos",82:"tk_por",83:"tk_dividido",84:"tk_modulo",85:"tk_menorque",86:"tk_mayorque",87:"tk_menorigual",88:"tk_mayorigual",89:"tk_dobleigual",90:"tk_diferente",91:"tk_and",92:"tk_or",93:"tk_not",94:"tk_concatenacion",95:"tk_repeticion",96:"RENTERO",97:"RDECIMAL",98:"RCARACTER",99:"RCADENA",100:"RTRUE",101:"RFALSE",102:"RNULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[24,2],[24,2],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,2],[24,1],[24,1],[24,2],[24,2],[8,1],[8,0],[20,7],[7,4],[7,4],[9,4],[9,2],[10,3],[22,2],[22,2],[40,2],[40,2],[11,5],[11,7],[11,7],[42,3],[42,1],[12,8],[12,7],[12,7],[45,2],[45,1],[47,4],[46,3],[37,3],[37,1],[13,7],[17,9],[21,11],[21,7],[56,1],[56,1],[55,1],[55,1],[14,2],[15,2],[16,3],[16,2],[61,7],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[18,7],[18,8],[68,3],[68,1],[69,2],[19,3],[19,4],[19,1],[71,5],[71,5],[71,6],[71,5],[71,6],[71,8],[70,3],[70,1],[79,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,3],[32,3],[32,1],[32,3],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
       this.$ = $$[$0-1];
                                                        //var retornoErrores = Object.assign([], listaErrores);
                                                        var retornoErrores = listaErrores;
                                                        listaErrores = [];
                                                        return {instr:this.$, errores:retornoErrores}
                                                
break;
case 2: case 55:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 56:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 15: case 18: case 20: case 21: case 22: case 30: case 33: case 50:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 16: case 17: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 31: case 32: case 51: case 87: case 96:
 this.$ = $$[$0]; 
break;
case 19: case 34:

                                                listaErrores.push(new Exception("Error Sintactico", "No se esperaba "+yytext, _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 37:
 this.$ = new Main($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 38:
 this.$ = new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 39:
 this.$ = new Print($$[$0-1],   _$[$0-3].first_line, _$[$0-3].first_column);   
break;
case 40:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0],   _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 41:
 this.$ = new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 42:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 43:
 this.$= new Incremento($$[$0-1], true, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 44:
 this.$= new Decremento($$[$0-1], true, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 45:
 this.$= new Decremento($$[$0], false, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 46:
 this.$= new Incremento($$[$0], false, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 47:
this.$ = new If($$[$0-2], $$[$0], null, null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 48:
this.$ = new If($$[$0-4], $$[$0-2], $$[$0], null,   _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 49:
this.$ = new If($$[$0-4], $$[$0-2], null, $$[$0],   _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 52:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1],   _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 53:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 54:
this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 57:
this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 58:
this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 59: case 82: case 94:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 60: case 83: case 95:
 this.$=[$$[$0]]; 
break;
case 61:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 62:
 this.$ = new Do_While($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 63:
this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], Tipo.ENTERO, _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 64:
this.$ = new For($$[$0-5], null, $$[$0-3], $$[$0-1], Tipo.STRING, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 65: case 66: case 67: case 114: case 125: case 126:
this.$ = $$[$0]; 
break;
case 68:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 69:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 70:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 71:
this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 72:
this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 73:
this.$ = new Ternario($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 74:
this.$ = Tipo.ENTERO;  
break;
case 75:
this.$ = Tipo.DECIMAL; 
break;
case 76:
this.$ = Tipo.BOOLEANO;
break;
case 77:
this.$ = Tipo.CARACTER;
break;
case 78:
this.$ = Tipo.STRING;  
break;
case 79:
this.$ = Tipo.VOID;    
break;
case 80:
 this.$ = new Funcion($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 81:
 this.$ = new Funcion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 84:
 this.$ = {tipo: $$[$0-1], identificador: $$[$0]} ;
break;
case 85:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 86:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 88:
 this.$ = new ToLowerCase($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 89:
 this.$ = new ToUpperCase($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 90:
 this.$ = new Parse($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);   
break;
case 91:
 this.$ = new Length($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 92:
 this.$ = new CaracterOfPosition($$[$0-5], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 93:
 this.$ = new SubString($$[$0-7], $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 97:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.MAS,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.RESTA,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 99:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.POR,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.DIV,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 101:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.MODULO,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 102:
this.$ = new Aritmetica($$[$0], null, Operador_Aritmetico.UMENOS, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 103:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MENORQUE,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 104:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MAYORQUE,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 105:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.IGUALACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 108:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 109:
this.$ = new Logica($$[$0-2], $$[$0], Operador_Logico.AND,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 110:
this.$ = new Logica($$[$0-2], $$[$0], Operador_Logico.OR,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 111:
this.$ = new Logica($$[$0], null, Operador_Logico.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 112:
this.$ = new Operador($$[$0-2], $$[$0], Operador_Cadena.CONCATENACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 113:
this.$ = new Operador($$[$0-2], $$[$0], Operador_Cadena.REPETICION,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 115:
this.$ = $$[$0-1]; 
break;
case 116:
this.$ = new Primitivo(Tipo.ENTERO,   $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 117:
this.$ = new Primitivo(Tipo.DECIMAL,  $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 118:
this.$ = new Primitivo(Tipo.CARACTER, $$[$0].slice(1,-1),    _$[$0].first_line, _$[$0].first_column);    
break;
case 119:
this.$ = new Primitivo(Tipo.STRING,   $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 120:
this.$ = new Identificador(           $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 121:
this.$ = new Primitivo(Tipo.BOOLEANO, true,  _$[$0].first_line, _$[$0].first_column);    
break;
case 122:
this.$ = new Primitivo(Tipo.BOOLEANO, false, _$[$0].first_line, _$[$0].first_column);    
break;
case 123:
this.$ = new Primitivo(Tipo.NULO,     "null",  _$[$0].first_line, _$[$0].first_column);    
break;
case 124:
this.$ = $$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{1:[3]},{2:$V0,5:[1,39],6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},o($Vi,[2,3]),o($Vi,$Vj,{8:41,23:$Vk}),o($Vi,$Vj,{8:43,23:$Vk}),o($Vi,$Vj,{8:44,23:$Vk}),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,$Vj,{8:45,23:$Vk}),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,$Vj,{8:46,23:$Vk}),{23:[1,47]},{27:[1,48]},{27:[1,49]},{35:[1,50],37:51,72:$Vl},{27:$Vm,36:$Vn,38:$Vo,39:$Vp,72:$Vq},{27:[1,58]},{27:[1,59]},{27:[1,60]},{23:[1,61]},{23:[1,62]},{19:77,22:78,23:[1,64],25:$Vr,27:$Vs,32:63,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{29:[1,84]},o($VF,[2,87]),o($VG,$VH,{26:[1,85]}),{27:[1,86],35:[1,87]},o($VG,[2,74]),o($VG,[2,75]),o($VG,[2,76]),o($VG,[2,77]),o($VG,[2,78]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,4]),o($VI,[2,35]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,15]),o($Vi,[2,18]),o($Vi,[2,19]),{19:77,22:78,25:$Vr,27:$Vs,32:88,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:89,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o($VJ,$VK,{27:[1,91],36:$VL}),o($VM,[2,41],{51:[1,92]}),{75:[1,93]},{19:77,22:78,25:$Vr,27:$Vs,32:94,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,28:[1,95],32:98,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,70:96,71:31,79:97,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o($VF,[2,43]),o($VF,[2,44]),{73:[1,99],74:[1,100],76:[1,101],77:[1,102],78:[1,103]},{19:77,22:78,25:$Vr,27:$Vs,32:104,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:105,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:106,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o($VI,[2,69]),o($VI,[2,70]),{23:[1,107],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},o($VI,[2,72]),{19:77,22:78,25:$Vr,27:$Vs,32:123,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:124,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o($VF,[2,114]),{19:77,22:78,25:$Vr,27:$Vs,32:125,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o($VF,[2,116]),o($VF,[2,117]),o($VF,[2,118]),o($VF,[2,119]),o($VF,[2,120],{27:$Vm,38:$Vo,39:$Vp,72:$Vq}),o($VF,[2,121]),o($VF,[2,122]),o($VF,[2,123]),o($VF,[2,124]),o($VF,[2,125]),o($VF,[2,126]),{35:[1,126]},{35:[1,127]},{72:$Vl},o($VG,$VH),{2:$V0,4:128,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{27:[1,129]},{9:131,25:$Vr,34:133,35:[1,132],55:130,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh},{57:[1,134]},{28:[1,135],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},{28:[1,136],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},{19:77,22:78,25:$Vr,27:$Vs,32:137,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{25:$Vr,28:[1,138],34:141,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,68:139,69:140},{35:[1,142]},{27:[1,143]},o([2,5,23,25,28,30,31,33,35,41,43,44,48,50,52,53,54,58,59,60,63,64,65,66,67],[2,42],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$}),o($VF,[2,85]),{28:[1,144],51:[1,145]},o($V01,[2,95]),o($V01,[2,96],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$}),{27:[1,146]},{27:[1,147]},{27:[1,148]},{27:[1,149]},{27:[1,150]},{28:[1,151],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},{28:[1,152],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},{28:[1,153],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},o($VI,[2,71]),{19:77,22:78,25:$Vr,27:$Vs,32:154,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:155,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:156,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:157,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:158,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:159,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:160,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:161,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:162,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:163,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:164,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:165,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:166,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:167,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:168,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o($VF,[2,102]),o($V11,[2,111],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,94:$V_,95:$V$}),{28:[1,169],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},o($VF,[2,45]),o($VF,[2,46]),{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,30:[1,170],31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{28:[1,171]},{23:[1,172]},{23:[2,67]},{23:[2,68]},{35:[1,173],37:51},{19:77,22:78,25:$Vr,27:$Vs,32:174,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o($VM,[2,38]),o($VM,[2,39]),o($VM,[2,40],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$}),{29:[1,175]},{28:[1,176],51:[1,177]},o($V01,[2,83]),{35:[1,178]},o($VJ,[2,59]),{19:77,22:78,25:$Vr,27:$Vs,32:179,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o($VF,[2,86]),{19:77,22:78,25:$Vr,27:$Vs,32:98,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,79:180,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{28:[1,181]},{28:[1,182]},{28:[1,183]},{19:77,22:78,25:$Vr,27:$Vs,32:184,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{19:77,22:78,25:$Vr,27:$Vs,32:185,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{2:$V21,7:189,9:190,10:191,12:192,13:193,14:194,15:195,16:196,17:197,18:198,19:199,20:200,21:201,22:202,24:188,25:$V1,29:$V31,31:$V2,33:$V3,34:22,35:$V4,42:186,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{29:[1,204]},{29:[1,205]},o($V41,[2,97],{82:$VP,83:$VQ,84:$VR}),o($V41,[2,98],{82:$VP,83:$VQ,84:$VR}),o($VF,[2,99]),o($VF,[2,100]),o($VF,[2,101]),o($V51,[2,103],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR}),o($V51,[2,104],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR}),o($V51,[2,105],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR}),o($V51,[2,106],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR}),o($V51,[2,107],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR}),o($V51,[2,108],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR}),o($V11,[2,109],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,94:$V_,95:$V$}),o([2,5,23,25,28,29,30,31,33,35,41,43,44,48,49,50,51,52,53,54,58,59,60,63,64,65,66,67,92],[2,110],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,94:$V_,95:$V$}),o([2,5,23,25,28,29,30,31,33,35,41,43,44,48,49,50,51,52,53,54,58,59,60,63,64,65,66,67,91,92,94],[2,112],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,95:$V$}),o([2,5,23,25,28,29,30,31,33,35,41,43,44,48,49,50,51,52,53,54,58,59,60,63,64,65,66,67,91,92,94,95],[2,113],{80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX}),o($VF,[2,115],{62:[1,206]}),{52:[1,207]},{29:[1,208]},{19:77,22:78,25:$Vr,27:$Vs,32:209,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},o([23,51],$VK,{36:$VL}),{29:[1,210],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},{2:$V0,4:211,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{29:[1,212]},{25:$Vr,34:141,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,69:213},o($V01,[2,84]),{28:[1,214],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},o($V01,[2,94]),o($VF,[2,88]),o($VF,[2,89]),o($VF,[2,91]),{28:[1,215],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},{51:[1,216],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},o($Vi,[2,47],{43:[1,217]}),{2:$V0,4:218,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},o($VI,[2,51]),o($VI,$Vj,{8:219,23:$Vk}),o($VI,$Vj,{8:220,23:$Vk}),o($VI,$Vj,{8:221,23:$Vk}),o($VI,[2,23]),o($VI,[2,24]),o($VI,[2,25]),o($VI,[2,26]),o($VI,[2,27]),o($VI,[2,28]),o($VI,[2,29]),o($VI,$Vj,{8:222,23:$Vk}),o($VI,[2,31]),o($VI,[2,32]),o($VI,$Vj,{8:223,23:$Vk}),{23:[1,224]},{45:225,46:226,47:227,48:$V61,50:$V71},{2:$V0,4:230,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{19:77,22:78,25:$Vr,27:$Vs,32:231,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{27:[1,232]},{2:$V0,4:233,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{23:[1,234],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},{2:$V0,4:235,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,30:[1,236],31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{2:$V0,4:237,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},o($V01,[2,82]),o($VF,[2,90]),o($VF,[2,92]),{19:77,22:78,25:$Vr,27:$Vs,32:238,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{2:$V21,7:189,9:190,10:191,11:240,12:192,13:193,14:194,15:195,16:196,17:197,18:198,19:199,20:200,21:201,22:202,24:188,25:$V1,29:$V31,31:$V2,33:$V3,34:22,35:$V4,41:$V5,42:239,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,30:[1,241],31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},o($VI,[2,20]),o($VI,[2,21]),o($VI,[2,22]),o($VI,[2,30]),o($VI,[2,33]),o($VI,[2,34]),{30:[1,243],46:242,47:244,48:$V61,50:$V71},{30:[1,245]},o($V81,[2,56]),{49:[1,246]},{19:77,22:78,25:$Vr,27:$Vs,32:247,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,30:[1,248],31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{49:[1,249],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},{19:77,22:78,25:$Vr,27:$Vs,32:250,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,30:[1,251],31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{10:253,22:254,35:[1,255],56:252},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,30:[1,256],31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},o($VI,[2,80]),{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,30:[1,257],31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{28:[1,258],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},o($Vi,[2,48]),o($Vi,[2,49]),o($VI,[2,50]),{30:[1,259]},o($VI,[2,53]),o($V81,[2,55]),o($VI,[2,54]),{2:$V0,4:260,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{49:[1,261],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},o($VI,[2,61]),{19:77,22:78,25:$Vr,27:$Vs,32:262,34:82,35:$Vt,38:$Vu,39:$Vv,40:79,61:67,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31,81:$Vw,93:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC,101:$VD,102:$VE},{28:[1,263],80:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW,90:$VX,91:$VY,92:$VZ,94:$V_,95:$V$},o($VI,[2,37]),{28:[1,264]},{28:[2,65]},{28:[2,66]},{36:$Vn,38:$Vo,39:$Vp},o($VI,[2,64]),o($VI,[2,81]),o($VF,[2,93]),o($VI,[2,52]),{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,30:[2,58],31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{2:$V0,4:265,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},o($VF,[2,73]),{23:[1,266]},{29:[1,267]},o($V81,[2,57],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,34:22,71:31,6:40,2:$V0,25:$V1,31:$V2,33:$V3,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh}),o($VI,[2,62]),{2:$V0,4:268,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},{2:$V0,6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,25:$V1,30:[1,269],31:$V2,33:$V3,34:22,35:$V4,41:$V5,44:$V6,52:$V7,53:$V8,54:$V9,58:$Va,59:$Vb,60:$Vc,63:$Vd,64:$Ve,65:$Vf,66:$Vg,67:$Vh,71:31},o($VI,[2,63])],
defaultActions: {39:[2,1],131:[2,67],132:[2,68],253:[2,65],254:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        var listaErrores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/*Comentario de una linea*/
break;
case 2:// comentario multiple líneas
break;
case 3:return 31;
break;
case 4:return 33;
break;
case 5:return 41;
break;
case 6:return 43;
break;
case 7:return 44;
break;
case 8:return 48;
break;
case 9:return 50;
break;
case 10:return 58;
break;
case 11:return 52;
break;
case 12:return 53;
break;
case 13:return 59;
break;
case 14:return 60
break;
case 15:return 'REND';
break;
case 16:return 'RSTRUCT';
break;
case 17:return 26;
break;
case 18:return "RFOR";
break;
case 19:return "RIN";
break;
case 20:return 73;
break;
case 21:return 74;
break;
case 22:return 75;
break;
case 23:return 76;
break;
case 24:return 77;
break;
case 25:return 78;
break;
case 26:return 102;
break;
case 27:return 63;
break;
case 28:return 64;
break;
case 29:return 65;
break;
case 30:return 100;
break;
case 31:return 101;
break;
case 32:return 66;
break;
case 33:return 67;
break;
case 34:return "RVOID";
break;
case 35:return 97;
break;
case 36:return 96;
break;
case 37:return 98;
break;
case 38:return 35;
break;
case 39:return 91
break;
case 40:return 49;
break;
case 41:return 23;
break;
case 42:return 29;
break;
case 43:return 30;
break;
case 44:return 'tk_cora';
break;
case 45:return "tk_corc"
break;
case 46:return 27;
break;
case 47:return 28;
break;
case 48:return 94;
break;
case 49:return 23;
break;
case 50:return 'tk_dolar';
break;
case 51:return 51;
break;
case 52:return 38;
break;
case 53:return 39;
break;
case 54:return 'tk_numeral';
break;
case 55:return 62;
break;
case 56:return 95;
break;
case 57:return 72;
break;
case 58:return 80;
break;
case 59:return 81;
break;
case 60:return 82;
break;
case 61:return 83;
break;
case 62:return 84;
break;
case 63:return 90;
break;
case 64:return 87;
break;
case 65:return 88;
break;
case 66:return 85;
break;
case 67:return 86;
break;
case 68:return 89;
break;
case 69:return 36;
break;
case 70:return 92;
break;
case 71:return 93;
break;
case 72:cadena="";this.begin("string");
break;
case 73:cadena+=yy_.yytext;
break;
case 74:cadena+="\"";
break;
case 75:cadena+="\n";
break;
case 76:cadena+=" ";
break;
case 77:cadena+="\t";
break;
case 78:cadena+="\\";
break;
case 79:cadena+="\'";
break;
case 80:yy_.yytext=cadena; this.popState(); return 99;
break;
case 81:return 5;
break;
case 82: 
        listaErrores.push(new Exception("Error Lexico", "No se reconoce "+yy_.yytext, yy_.yylloc.first_line,  yy_.yylloc.first_column));
        
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:println\b)/,/^(?:print\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:begin\b)/,/^(?:struct\b)/,/^(?:main\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:toLowercase\b)/,/^(?:toUppercase\b)/,/^(?:parse\b)/,/^(?:length\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:void\b)/,/^(?:[0-9]+(\.[0-9]+)+\b)/,/^(?:[0-9]+\b)/,/^(?:'([^\\\"]|\\.)')/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:&&)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:&)/,/^(?:;)/,/^(?:\$)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:#)/,/^(?:\?)/,/^(?:\^)/,/^(?:\.)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:\|\|)/,/^(?:!)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\\\')/,/^(?:["])/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[73,74,75,76,77,78,79,80],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}