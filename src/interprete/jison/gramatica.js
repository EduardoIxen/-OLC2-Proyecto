/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[5,19,23,25,28,32,33,37,39,41,42,43,44,45,46,47,48,49],$Vf=[2,22],$Vg=[1,31],$Vh=[1,47],$Vi=[1,52],$Vj=[1,45],$Vk=[1,46],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[5,19,23,25,28,30,32,33,37,39,41,42,43,44,45,46,47,48,49],$Vt=[5,18,19,23,25,28,30,32,33,37,39,40,41,42,43,44,45,46,47,48,49],$Vu=[5,18,19,23,25,28,30,32,33,37,39,41,42,43,44,45,46,47,48,49],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,75],$VG=[1,76],$VH=[1,77],$VI=[1,78],$VJ=[1,79],$VK=[5,18,19,22,23,25,28,30,32,33,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65],$VL=[5,18,19,22,23,25,28,30,32,33,37,38,39,41,42,43,44,45,46,47,48,49,61,62],$VM=[1,107],$VN=[5,18,19,22,23,25,28,30,32,33,37,38,39,41,42,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,64,65],$VO=[5,18,19,22,23,25,28,30,32,33,37,38,39,41,42,43,44,45,46,47,48,49,55,56,57,58,59,60,61,62,64,65],$VP=[1,128],$VQ=[1,127],$VR=[32,37,39];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"imprimir_instr":7,"fin_instr":8,"declaracion_instr":9,"asignacion_instr":10,"if_instr":11,"switch_instr":12,"while_instr":13,"break_instr":14,"continue_instr":15,"return_instr":16,"instruccion2":17,"tk_puntocoma":18,"RPRINTLN":19,"tk_para":20,"expresion":21,"tk_parc":22,"RPRINT":23,"TIPO":24,"identificador":25,"tk_igual":26,"LISTA_ID":27,"RIF":28,"BLOCK_IF":29,"RELSE":30,"tk_llavea":31,"tk_llavec":32,"RSWITCH":33,"list_case":34,"default_intr":35,"case_instr":36,"RCASE":37,"tk_dospuntos":38,"RDEFAULT":39,"tk_coma":40,"RWHILE":41,"RBREAK":42,"RCONTINUE":43,"RRETURN":44,"RINT":45,"RDOUBLE":46,"RBOOLEAN":47,"RCHAR":48,"RSTRING":49,"tk_mas":50,"tk_menos":51,"tk_por":52,"tk_dividido":53,"tk_modulo":54,"tk_menorque":55,"tk_mayorque":56,"tk_menorigual":57,"tk_mayorigual":58,"tk_dobleigual":59,"tk_diferente":60,"tk_and":61,"tk_or":62,"tk_not":63,"tk_concatenacion":64,"tk_repeticion":65,"RENTERO":66,"RDECIMAL":67,"RCARACTER":68,"RCADENA":69,"RTRUE":70,"RFALSE":71,"RNULL":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"tk_puntocoma",19:"RPRINTLN",20:"tk_para",22:"tk_parc",23:"RPRINT",25:"identificador",26:"tk_igual",28:"RIF",30:"RELSE",31:"tk_llavea",32:"tk_llavec",33:"RSWITCH",37:"RCASE",38:"tk_dospuntos",39:"RDEFAULT",40:"tk_coma",41:"RWHILE",42:"RBREAK",43:"RCONTINUE",44:"RRETURN",45:"RINT",46:"RDOUBLE",47:"RBOOLEAN",48:"RCHAR",49:"RSTRING",50:"tk_mas",51:"tk_menos",52:"tk_por",53:"tk_dividido",54:"tk_modulo",55:"tk_menorque",56:"tk_mayorque",57:"tk_menorigual",58:"tk_mayorigual",59:"tk_dobleigual",60:"tk_diferente",61:"tk_and",62:"tk_or",63:"tk_not",64:"tk_concatenacion",65:"tk_repeticion",66:"RENTERO",67:"RDECIMAL",68:"RCARACTER",69:"RCADENA",70:"RTRUE",71:"RFALSE",72:"RNULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[17,2],[17,2],[17,2],[17,1],[17,1],[17,1],[17,1],[17,1],[8,1],[8,0],[7,4],[7,4],[9,4],[9,2],[10,3],[11,5],[11,7],[11,7],[29,3],[29,1],[12,8],[12,7],[12,7],[34,2],[34,1],[36,4],[35,3],[27,3],[27,1],[13,7],[14,2],[15,2],[16,3],[24,1],[24,1],[24,1],[24,1],[24,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,3],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]; 
break;
case 2: case 36:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 37:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 13: case 14: case 15: case 31:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 16: case 17: case 18: case 19: case 20: case 32:
 this.$ = $$[$0]; 
break;
case 23:
 this.$ = new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 24:
 this.$ = new Print($$[$0-1],   _$[$0-3].first_line, _$[$0-3].first_column);   
break;
case 25:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0],   _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 26:
 this.$ = new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 27:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 28:
this.$ = new If($$[$0-2], $$[$0], null, null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 29:
this.$ = new If($$[$0-4], $$[$0-2], $$[$0], null,   _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 30:
this.$ = new If($$[$0-4], $$[$0-2], null, $$[$0],   _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 33:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1],   _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 34:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 35:
this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 38:
this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 39:
this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 41:
 this.$=[$$[$0]]; 
break;
case 42:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 43:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 44:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 45:
this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 46:
this.$ = Tipo.ENTERO;  
break;
case 47:
this.$ = Tipo.DECIMAL; 
break;
case 48:
this.$ = Tipo.BOOLEANO;
break;
case 49:
this.$ = Tipo.CARACTER;
break;
case 50:
this.$ = Tipo.STRING;  
break;
case 51:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.MAS,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 52:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.RESTA,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 53:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.POR,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 54:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.DIV,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 55:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.MODULO,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 56:
this.$ = new Aritmetica($$[$0], null, Operador_Aritmetico.UMENOS, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MENORQUE,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 58:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MAYORQUE,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 59:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 60:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 61:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.IGUALACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 62:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
this.$ = new Logica($$[$0-2], $$[$0], Operador_Logico.AND,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 64:
this.$ = new Logica($$[$0-2], $$[$0], Operador_Logico.OR,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 65:
this.$ = new Logica($$[$0], null, Operador_Logico.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 66:
this.$ = new Operador($$[$0-2], $$[$0], Operador_Cadena.CONCATENACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
this.$ = new Operador($$[$0-2], $$[$0], Operador_Cadena.REPETICION,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 68:
this.$ = $$[$0-1]
break;
case 69:
this.$ = new Primitivo(Tipo.ENTERO,   $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 70:
this.$ = new Primitivo(Tipo.DECIMAL,  $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 71:
this.$ = new Primitivo(Tipo.CARACTER, $$[$0].slice(1,-1),    _$[$0].first_line, _$[$0].first_column);    
break;
case 72:
this.$ = new Primitivo(Tipo.STRING,   $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 73:
this.$ = new Identificador(           $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 74:
this.$ = new Primitivo(Tipo.BOOLEANO, true,  _$[$0].first_line, _$[$0].first_column);    
break;
case 75:
this.$ = new Primitivo(Tipo.BOOLEANO, false, _$[$0].first_line, _$[$0].first_column);    
break;
case 76:
this.$ = new Primitivo(Tipo.NULO,     "null",  _$[$0].first_line, _$[$0].first_column);    
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,19:$V0,23:$V1,24:15,25:$V2,28:$V3,33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},{1:[3]},{5:[1,28],6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,19:$V0,23:$V1,24:15,25:$V2,28:$V3,33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},o($Ve,[2,3]),o($Ve,$Vf,{8:30,18:$Vg}),o($Ve,$Vf,{8:32,18:$Vg}),o($Ve,$Vf,{8:33,18:$Vg}),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),{20:[1,34]},{20:[1,35]},{25:[1,36],27:37},{26:[1,38]},{20:[1,39]},{20:[1,40]},{20:[1,41]},{18:[1,42]},{18:[1,43]},{20:$Vh,21:44,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{25:[2,46]},{25:[2,47]},{25:[2,48]},{25:[2,49]},{25:[2,50]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Vs,[2,21]),o($Ve,[2,5]),o($Ve,[2,6]),{20:$Vh,21:56,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:57,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},o($Vt,[2,41],{26:[1,58]}),o($Vu,[2,26],{40:[1,59]}),{20:$Vh,21:60,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:61,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:62,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:63,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},o($Vs,[2,43]),o($Vs,[2,44]),{18:[1,64],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,64:$VI,65:$VJ},{20:$Vh,21:80,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:81,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:82,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},o($VK,[2,69]),o($VK,[2,70]),o($VK,[2,71]),o($VK,[2,72]),o($VK,[2,73]),o($VK,[2,74]),o($VK,[2,75]),o($VK,[2,76]),{22:[1,83],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,64:$VI,65:$VJ},{22:[1,84],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,64:$VI,65:$VJ},{20:$Vh,21:85,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{25:[1,86]},o($Vu,[2,27],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,64:$VI,65:$VJ}),{22:[1,87],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,64:$VI,65:$VJ},{22:[1,88],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,64:$VI,65:$VJ},{22:[1,89],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,64:$VI,65:$VJ},o($Vs,[2,45]),{20:$Vh,21:90,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:91,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:92,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:93,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:94,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:95,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:96,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:97,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:98,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:99,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:100,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:101,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:102,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:103,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{20:$Vh,21:104,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},o($VK,[2,56]),o($VL,[2,65],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,64:$VI,65:$VJ}),{22:[1,105],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,64:$VI,65:$VJ},o($Vu,[2,23]),o($Vu,[2,24]),o($Vu,[2,25],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,64:$VI,65:$VJ}),o($Vt,[2,40]),{7:109,9:110,10:111,12:112,13:113,14:114,15:115,16:116,17:108,19:$V0,23:$V1,24:15,25:$V2,29:106,31:$VM,33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},{31:[1,117]},{31:[1,118]},o($VN,[2,51],{52:$Vx,53:$Vy,54:$Vz}),o($VN,[2,52],{52:$Vx,53:$Vy,54:$Vz}),o($VK,[2,53]),o($VK,[2,54]),o($VK,[2,55]),o($VO,[2,57],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($VO,[2,58],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($VO,[2,59],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($VO,[2,60],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($VO,[2,61],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($VO,[2,62],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz}),o($VL,[2,63],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,64:$VI,65:$VJ}),o([5,18,19,22,23,25,28,30,32,33,37,38,39,41,42,43,44,45,46,47,48,49,62],[2,64],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,64:$VI,65:$VJ}),o([5,18,19,22,23,25,28,30,32,33,37,38,39,41,42,43,44,45,46,47,48,49,61,62,64],[2,66],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,65:$VJ}),o([5,18,19,22,23,25,28,30,32,33,37,38,39,41,42,43,44,45,46,47,48,49,61,62,64,65],[2,67],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF}),o($VK,[2,68]),o($Ve,[2,28],{30:[1,119]}),{4:120,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,19:$V0,23:$V1,24:15,25:$V2,28:$V3,33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},o($Vs,[2,32]),o($Vs,$Vf,{8:121,18:$Vg}),o($Vs,$Vf,{8:122,18:$Vg}),o($Vs,$Vf,{8:123,18:$Vg}),o($Vs,[2,16]),o($Vs,[2,17]),o($Vs,[2,18]),o($Vs,[2,19]),o($Vs,[2,20]),{34:124,35:125,36:126,37:$VP,39:$VQ},{4:129,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,19:$V0,23:$V1,24:15,25:$V2,28:$V3,33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},{7:109,9:110,10:111,11:131,12:112,13:113,14:114,15:115,16:116,17:108,19:$V0,23:$V1,24:15,25:$V2,28:$V3,29:130,31:$VM,33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},{6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,19:$V0,23:$V1,24:15,25:$V2,28:$V3,32:[1,132],33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},o($Vs,[2,13]),o($Vs,[2,14]),o($Vs,[2,15]),{32:[1,134],35:133,36:135,37:$VP,39:$VQ},{32:[1,136]},o($VR,[2,37]),{38:[1,137]},{20:$Vh,21:138,25:$Vi,51:$Vj,63:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr},{6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,19:$V0,23:$V1,24:15,25:$V2,28:$V3,32:[1,139],33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},o($Ve,[2,29]),o($Ve,[2,30]),o($Vs,[2,31]),{32:[1,140]},o($Vs,[2,34]),o($VR,[2,36]),o($Vs,[2,35]),{4:141,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,19:$V0,23:$V1,24:15,25:$V2,28:$V3,33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},{38:[1,142],50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE,60:$VF,61:$VG,62:$VH,64:$VI,65:$VJ},o($Vs,[2,42]),o($Vs,[2,33]),{6:29,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,19:$V0,23:$V1,24:15,25:$V2,28:$V3,32:[2,39],33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},{4:143,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,19:$V0,23:$V1,24:15,25:$V2,28:$V3,33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd},o($VR,[2,38],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,24:15,6:29,19:$V0,23:$V1,25:$V2,28:$V3,33:$V4,41:$V5,42:$V6,43:$V7,44:$V8,45:$V9,46:$Va,47:$Vb,48:$Vc,49:$Vd})],
defaultActions: {23:[2,46],24:[2,47],25:[2,48],26:[2,49],27:[2,50],28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/*Comentario de una linea*/
break;
case 2:// comentario multiple líneas
break;
case 3:return 19;
break;
case 4:return 23;
break;
case 5:return 28;
break;
case 6:return 30;
break;
case 7:return 33;
break;
case 8:return 37;
break;
case 9:return 39;
break;
case 10:return 'RPOW';
break;
case 11:return 'RSQRT';
break;
case 12:return 'RSIN';
break;
case 13:return 'RCOS';
break;
case 14:return 'RTAN';
break;
case 15:return 'RLOG10';
break;
case 16:return 42;
break;
case 17:return 41;
break;
case 18:return 'RDO';
break;
case 19:return 43;
break;
case 20:return 44
break;
case 21:return 'REND';
break;
case 22:return 'RSTRUCT';
break;
case 23:return 72;
break;
case 24:return 45;
break;
case 25:return 46;
break;
case 26:return 47;
break;
case 27:return 70;
break;
case 28:return 71;
break;
case 29:return 48;
break;
case 30:return 49;
break;
case 31:return 67;
break;
case 32:return 66;
break;
case 33:return 68;
break;
case 34:return 25;
break;
case 35:return 61
break;
case 36:return 38;
break;
case 37:return 18;
break;
case 38:return 31;
break;
case 39:return 32;
break;
case 40:return 'tk_cora';
break;
case 41:return "tk_corc"
break;
case 42:return 20;
break;
case 43:return 22;
break;
case 44:return 64;
break;
case 45:return 18;
break;
case 46:return 'tk_dolar';
break;
case 47:return 40;
break;
case 48:return 'tk_masmas';
break;
case 49:return 'tk_menosmenos';
break;
case 50:return 'tk_numeral';
break;
case 51:return 'tk_interrogacion';
break;
case 52:return 65;
break;
case 53:return 50;
break;
case 54:return 51;
break;
case 55:return 52;
break;
case 56:return 53;
break;
case 57:return 54;
break;
case 58:return 60;
break;
case 59:return 57;
break;
case 60:return 58;
break;
case 61:return 55;
break;
case 62:return 56;
break;
case 63:return 59;
break;
case 64:return 26;
break;
case 65:return 62;
break;
case 66:return 63;
break;
case 67:cadena="";this.begin("string");
break;
case 68:cadena+=yy_.yytext;
break;
case 69:cadena+="\"";
break;
case 70:cadena+="\n";
break;
case 71:cadena+=" ";
break;
case 72:cadena+="\t";
break;
case 73:cadena+="\\";
break;
case 74:cadena+="\'";
break;
case 75:yy_.yytext=cadena; this.popState(); return 69;
break;
case 76:return 5;
break;
case 77: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:pow\b)/i,/^(?:sqrt\b)/i,/^(?:sin\b)/i,/^(?:cos\b)/i,/^(?:tan\b)/i,/^(?:log10\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:begin\b)/i,/^(?:struct\b)/i,/^(?:null\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:char\b)/i,/^(?:String\b)/i,/^(?:[0-9]+(\.[0-9]+)+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'([^\\\"]|\\.)')/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:&&)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:&)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:#)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\s)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74,75],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}