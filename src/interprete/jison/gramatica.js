/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,30],$V2=[1,19],$V3=[1,20],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,29],$V9=[1,31],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[2,5,24,29,30,32,34,37,40,44,46,48,49,50,54,55,56,59,60,61,62,63],$Vj=[2,34],$Vk=[1,40],$Vl=[1,49],$Vm=[1,48],$Vn=[1,59],$Vo=[1,64],$Vp=[1,56],$Vq=[1,57],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[2,71],$Vz=[2,5,24,29,30,32,34,37,39,40,44,46,48,49,50,54,55,56,59,60,61,62,63],$VA=[2,5,22,24,29,30,32,34,37,39,40,44,46,47,48,49,50,54,55,56,59,60,61,62,63],$VB=[2,54],$VC=[1,75],$VD=[2,5,22,24,29,30,32,34,37,39,40,44,46,48,49,50,54,55,56,59,60,61,62,63],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,95],$VN=[1,96],$VO=[1,97],$VP=[1,98],$VQ=[1,99],$VR=[1,100],$VS=[1,101],$VT=[2,5,22,24,27,28,29,30,32,34,37,39,40,44,45,46,47,48,49,50,54,55,56,59,60,61,62,63,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83],$VU=[1,111],$VV=[27,47],$VW=[2,5,22,24,27,28,29,30,32,34,37,39,40,44,45,46,47,48,49,50,54,55,56,59,60,61,62,63,79,80],$VX=[1,168],$VY=[1,153],$VZ=[2,5,22,24,27,28,29,30,32,34,37,39,40,44,45,46,47,48,49,50,54,55,56,59,60,61,62,63,68,69,73,74,75,76,77,78,79,80,82,83],$V_=[2,5,22,24,27,28,29,30,32,34,37,39,40,44,45,46,47,48,49,50,54,55,56,59,60,61,62,63,73,74,75,76,77,78,79,80,82,83],$V$=[1,189],$V01=[1,188],$V11=[29,44,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init":3,"instrucciones":4,"EOF":5,"instruccion":6,"imprimir_instr":7,"fin_instr":8,"declaracion_instr":9,"asignacion_instr":10,"if_instr":11,"switch_instr":12,"while_instr":13,"break_instr":14,"continue_instr":15,"return_instr":16,"do_while_instr":17,"funcion_instr":18,"llamada_instr":19,"main_instr":20,"for_instr":21,"tk_puntocoma":22,"instruccion2":23,"RVOID":24,"RMAIN":25,"tk_para":26,"tk_parc":27,"tk_llavea":28,"tk_llavec":29,"RPRINTLN":30,"expresion":31,"RPRINT":32,"TIPO":33,"identificador":34,"tk_igual":35,"LISTA_ID":36,"RIF":37,"BLOCK_IF":38,"RELSE":39,"RSWITCH":40,"list_case":41,"default_intr":42,"case_instr":43,"RCASE":44,"tk_dospuntos":45,"RDEFAULT":46,"tk_coma":47,"RWHILE":48,"RDO":49,"RFOR":50,"declaracion_for":51,"asignacion_for":52,"RIN":53,"RBREAK":54,"RCONTINUE":55,"RRETURN":56,"ternario_instr":57,"tk_interrogacion":58,"RINT":59,"RDOUBLE":60,"RBOOLEAN":61,"RCHAR":62,"RSTRING":63,"parametros":64,"parametro":65,"parametros_llamada":66,"parametro_llamada":67,"tk_mas":68,"tk_menos":69,"tk_por":70,"tk_dividido":71,"tk_modulo":72,"tk_menorque":73,"tk_mayorque":74,"tk_menorigual":75,"tk_mayorigual":76,"tk_dobleigual":77,"tk_diferente":78,"tk_and":79,"tk_or":80,"tk_not":81,"tk_concatenacion":82,"tk_repeticion":83,"RENTERO":84,"RDECIMAL":85,"RCARACTER":86,"RCADENA":87,"RTRUE":88,"RFALSE":89,"RNULL":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"tk_puntocoma",24:"RVOID",25:"RMAIN",26:"tk_para",27:"tk_parc",28:"tk_llavea",29:"tk_llavec",30:"RPRINTLN",32:"RPRINT",34:"identificador",35:"tk_igual",37:"RIF",39:"RELSE",40:"RSWITCH",44:"RCASE",45:"tk_dospuntos",46:"RDEFAULT",47:"tk_coma",48:"RWHILE",49:"RDO",50:"RFOR",53:"RIN",54:"RBREAK",55:"RCONTINUE",56:"RRETURN",58:"tk_interrogacion",59:"RINT",60:"RDOUBLE",61:"RBOOLEAN",62:"RCHAR",63:"RSTRING",68:"tk_mas",69:"tk_menos",70:"tk_por",71:"tk_dividido",72:"tk_modulo",73:"tk_menorque",74:"tk_mayorque",75:"tk_menorigual",76:"tk_mayorigual",77:"tk_dobleigual",78:"tk_diferente",79:"tk_and",80:"tk_or",81:"tk_not",82:"tk_concatenacion",83:"tk_repeticion",84:"RENTERO",85:"RDECIMAL",86:"RCARACTER",87:"RCADENA",88:"RTRUE",89:"RFALSE",90:"RNULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[23,2],[23,2],[23,2],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,2],[8,1],[8,0],[20,7],[7,4],[7,4],[9,4],[9,2],[10,3],[11,5],[11,7],[11,7],[38,3],[38,1],[12,8],[12,7],[12,7],[41,2],[41,1],[43,4],[42,3],[36,3],[36,1],[13,7],[17,9],[21,11],[21,7],[52,1],[51,1],[51,1],[14,2],[15,2],[16,3],[57,7],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[18,7],[18,8],[64,3],[64,1],[65,2],[19,3],[19,4],[66,3],[66,1],[67,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,1],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
       this.$ = $$[$0-1];
                                                        //var retornoErrores = Object.assign([], listaErrores);
                                                        var retornoErrores = listaErrores;
                                                        listaErrores = [];
                                                        return {instr:this.$, errores:retornoErrores}
                                                
break;
case 2: case 49:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 50:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 19: case 20: case 21: case 44:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 45: case 81:
 this.$ = $$[$0]; 
break;
case 18: case 32:

                                                listaErrores.push(new Exception("Error Sintactico", "No se esperaba "+yytext, _$[$0-1].first_line, _$[$0-1].first_column)); 
break;
case 35:
 this.$ = new Main($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 36:
 this.$ = new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 37:
 this.$ = new Print($$[$0-1],   _$[$0-3].first_line, _$[$0-3].first_column);   
break;
case 38:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0],   _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 39:
 this.$ = new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 40:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 41:
this.$ = new If($$[$0-2], $$[$0], null, null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 42:
this.$ = new If($$[$0-4], $$[$0-2], $$[$0], null,   _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 43:
this.$ = new If($$[$0-4], $$[$0-2], null, $$[$0],   _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 46:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1],   _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 47:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 48:
this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 51:
this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 52:
this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 53: case 74: case 79:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 54: case 75: case 80:
 this.$=[$$[$0]]; 
break;
case 55:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 56:
 this.$ = new Do_While($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 57:
this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], Tipo.ENTERO, _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 58:
this.$ = new For($$[$0-5], null, $$[$0-3], $$[$0-1], Tipo.STRING, _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 59: case 60: case 99:
this.$ = $$[$0]; 
break;
case 61:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 62:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 63:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 64:
this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 65:
this.$ = new Ternario($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 66:
this.$ = Tipo.ENTERO;  
break;
case 67:
this.$ = Tipo.DECIMAL; 
break;
case 68:
this.$ = Tipo.BOOLEANO;
break;
case 69:
this.$ = Tipo.CARACTER;
break;
case 70:
this.$ = Tipo.STRING;  
break;
case 71:
this.$ = Tipo.VOID;    
break;
case 72:
 this.$ = new Funcion($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 73:
 this.$ = new Funcion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 76:
 this.$ = {tipo: $$[$0-1], identificador: $$[$0]} ;
break;
case 77:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 78:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 82:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.MAS,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 83:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.RESTA,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 84:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.POR,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.DIV,      _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 86:
this.$ = new Aritmetica($$[$0-2], $$[$0], Operador_Aritmetico.MODULO,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 87:
this.$ = new Aritmetica($$[$0], null, Operador_Aritmetico.UMENOS, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 88:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MENORQUE,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MAYORQUE,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.IGUALACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
this.$ = new Relacional($$[$0-2], $$[$0], Operador_Relacional.DIFERENCIA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
this.$ = new Logica($$[$0-2], $$[$0], Operador_Logico.AND,   _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
this.$ = new Logica($$[$0-2], $$[$0], Operador_Logico.OR,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
this.$ = new Logica($$[$0], null, Operador_Logico.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 97:
this.$ = new Operador($$[$0-2], $$[$0], Operador_Cadena.CONCATENACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98:
this.$ = new Operador($$[$0-2], $$[$0], Operador_Cadena.REPETICION,    _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
this.$ = $$[$0-1]; 
break;
case 101:
this.$ = new Primitivo(Tipo.ENTERO,   $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 102:
this.$ = new Primitivo(Tipo.DECIMAL,  $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 103:
this.$ = new Primitivo(Tipo.CARACTER, $$[$0].slice(1,-1),    _$[$0].first_line, _$[$0].first_column);    
break;
case 104:
this.$ = new Primitivo(Tipo.STRING,   $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 105:
this.$ = new Identificador(           $$[$0],    _$[$0].first_line, _$[$0].first_column);    
break;
case 106:
this.$ = new Primitivo(Tipo.BOOLEANO, true,  _$[$0].first_line, _$[$0].first_column);    
break;
case 107:
this.$ = new Primitivo(Tipo.BOOLEANO, false, _$[$0].first_line, _$[$0].first_column);    
break;
case 108:
this.$ = new Primitivo(Tipo.NULO,     "null",  _$[$0].first_line, _$[$0].first_column);    
break;
case 109:
this.$ = $$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{1:[3]},{2:$V0,5:[1,37],6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vi,[2,3]),o($Vi,$Vj,{8:39,22:$Vk}),o($Vi,$Vj,{8:41,22:$Vk}),o($Vi,$Vj,{8:42,22:$Vk}),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),{22:[1,43]},{26:[1,44]},{26:[1,45]},{34:[1,46],36:47},{26:$Vl,35:$Vm},{26:[1,50]},{26:[1,51]},{26:[1,52]},{22:[1,53]},{22:[1,54]},{19:68,26:$Vn,31:55,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{28:[1,69]},{25:[1,70],34:$Vy},{26:[1,71],34:[1,72]},{34:[2,66]},{34:[2,67]},{34:[2,68]},{34:[2,69]},{34:[2,70]},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,4]),o($Vz,[2,33]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,18]),{19:68,26:$Vn,31:73,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:74,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},o($VA,$VB,{26:[1,76],35:$VC}),o($VD,[2,39],{47:[1,77]}),{19:68,26:$Vn,31:78,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,27:[1,79],31:82,34:$Vo,57:58,66:80,67:81,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:83,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:84,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:85,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},o($Vz,[2,62]),o($Vz,[2,63]),{22:[1,86],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},{19:68,26:$Vn,31:102,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:103,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},o($VT,[2,99]),{19:68,26:$Vn,31:104,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},o($VT,[2,101]),o($VT,[2,102]),o($VT,[2,103]),o($VT,[2,104]),o($VT,[2,105],{26:$Vl}),o($VT,[2,106]),o($VT,[2,107]),o($VT,[2,108]),o($VT,[2,109]),{2:$V0,4:105,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{26:[1,106]},{9:108,24:$VU,33:110,34:[1,109],51:107,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{53:[1,112]},{27:[1,113],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},{27:[1,114],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},{19:68,26:$Vn,31:115,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{24:$VU,27:[1,116],33:119,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,64:117,65:118},{34:[1,120]},o([2,5,22,24,27,29,30,32,34,37,39,40,44,46,48,49,50,54,55,56,59,60,61,62,63],[2,40],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS}),o($VT,[2,77]),{27:[1,121],47:[1,122]},o($VV,[2,80]),o($VV,[2,81],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS}),{27:[1,123],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},{27:[1,124],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},{27:[1,125],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},o($Vz,[2,64]),{19:68,26:$Vn,31:126,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:127,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:128,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:129,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:130,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:131,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:132,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:133,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:134,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:135,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:136,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:137,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:138,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:139,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{19:68,26:$Vn,31:140,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},o($VT,[2,87]),o($VW,[2,96],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,82:$VR,83:$VS}),{27:[1,141],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},{2:$V0,6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,29:[1,142],30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{27:[1,143]},{22:[1,144]},{22:[2,60]},{22:[2,61]},{34:[1,145],36:47},{34:$Vy},{19:68,26:$Vn,31:146,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},o($VD,[2,36]),o($VD,[2,37]),o($VD,[2,38],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS}),{28:[1,147]},{27:[1,148],47:[1,149]},o($VV,[2,75]),{34:[1,150]},o($VA,[2,53]),o($VT,[2,78]),{19:68,26:$Vn,31:82,34:$Vo,57:58,67:151,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{2:$VX,7:155,9:156,10:157,12:158,13:159,14:160,15:161,16:162,17:163,18:164,19:165,20:166,21:167,23:154,24:$V1,28:$VY,30:$V2,32:$V3,33:21,34:$V4,38:152,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{28:[1,169]},{28:[1,170]},o($VZ,[2,82],{70:$VG,71:$VH,72:$VI}),o($VZ,[2,83],{70:$VG,71:$VH,72:$VI}),o($VT,[2,84]),o($VT,[2,85]),o($VT,[2,86]),o($V_,[2,88],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI}),o($V_,[2,89],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI}),o($V_,[2,90],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI}),o($V_,[2,91],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI}),o($V_,[2,92],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI}),o($V_,[2,93],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI}),o($VW,[2,94],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,82:$VR,83:$VS}),o([2,5,22,24,27,28,29,30,32,34,37,39,40,44,45,46,47,48,49,50,54,55,56,59,60,61,62,63,80],[2,95],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,82:$VR,83:$VS}),o([2,5,22,24,27,28,29,30,32,34,37,39,40,44,45,46,47,48,49,50,54,55,56,59,60,61,62,63,79,80,82],[2,97],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,83:$VS}),o([2,5,22,24,27,28,29,30,32,34,37,39,40,44,45,46,47,48,49,50,54,55,56,59,60,61,62,63,79,80,82,83],[2,98],{68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO}),o($VT,[2,100],{58:[1,171]}),{48:[1,172]},{28:[1,173]},{19:68,26:$Vn,31:174,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},o([22,47],$VB,{35:$VC}),{28:[1,175],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},{2:$V0,4:176,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{28:[1,177]},{24:$VU,33:119,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh,65:178},o($VV,[2,76]),o($VV,[2,79]),o($Vi,[2,41],{39:[1,179]}),{2:$V0,4:180,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vz,[2,45]),o($Vz,$Vj,{8:181,22:$Vk}),o($Vz,$Vj,{8:182,22:$Vk}),o($Vz,$Vj,{8:183,22:$Vk}),o($Vz,[2,22]),o($Vz,[2,23]),o($Vz,[2,24]),o($Vz,[2,25]),o($Vz,[2,26]),o($Vz,[2,27]),o($Vz,[2,28]),o($Vz,[2,29]),o($Vz,[2,30]),o($Vz,[2,31]),{22:[1,184]},{41:185,42:186,43:187,44:$V$,46:$V01},{2:$V0,4:190,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{19:68,26:$Vn,31:191,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{26:[1,192]},{2:$V0,4:193,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{22:[1,194],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},{2:$V0,4:195,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$V0,6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,29:[1,196],30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$V0,4:197,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($VV,[2,74]),{2:$VX,7:155,9:156,10:157,11:199,12:158,13:159,14:160,15:161,16:162,17:163,18:164,19:165,20:166,21:167,23:154,24:$V1,28:$VY,30:$V2,32:$V3,33:21,34:$V4,37:$V5,38:198,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$V0,6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,29:[1,200],30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vz,[2,19]),o($Vz,[2,20]),o($Vz,[2,21]),o($Vz,[2,32]),{29:[1,202],42:201,43:203,44:$V$,46:$V01},{29:[1,204]},o($V11,[2,50]),{45:[1,205]},{19:68,26:$Vn,31:206,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{2:$V0,6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,29:[1,207],30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{45:[1,208],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},{19:68,26:$Vn,31:209,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{2:$V0,6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,29:[1,210],30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{10:212,34:[1,213],52:211},{2:$V0,6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,29:[1,214],30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vz,[2,72]),{2:$V0,6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,29:[1,215],30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vi,[2,42]),o($Vi,[2,43]),o($Vz,[2,44]),{29:[1,216]},o($Vz,[2,47]),o($V11,[2,49]),o($Vz,[2,48]),{2:$V0,4:217,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{45:[1,218],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},o($Vz,[2,55]),{19:68,26:$Vn,31:219,34:$Vo,57:58,69:$Vp,81:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw,90:$Vx},{27:[1,220],68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,82:$VR,83:$VS},o($Vz,[2,35]),{27:[1,221]},{27:[2,59]},{35:$Vm},o($Vz,[2,58]),o($Vz,[2,73]),o($Vz,[2,46]),{2:$V0,6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,29:[2,52],30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$V0,4:222,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($VT,[2,65]),{22:[1,223]},{28:[1,224]},o($V11,[2,51],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,33:21,6:38,2:$V0,24:$V1,30:$V2,32:$V3,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh}),o($Vz,[2,56]),{2:$V0,4:225,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},{2:$V0,6:38,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,24:$V1,29:[1,226],30:$V2,32:$V3,33:21,34:$V4,37:$V5,40:$V6,48:$V7,49:$V8,50:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,63:$Vh},o($Vz,[2,57])],
defaultActions: {32:[2,66],33:[2,67],34:[2,68],35:[2,69],36:[2,70],37:[2,1],108:[2,60],109:[2,61],111:[2,71],212:[2,59]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        var listaErrores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/*Comentario de una linea*/
break;
case 2:// comentario multiple líneas
break;
case 3:return 30;
break;
case 4:return 32;
break;
case 5:return 37;
break;
case 6:return 39;
break;
case 7:return 40;
break;
case 8:return 44;
break;
case 9:return 46;
break;
case 10:return 'RPOW';
break;
case 11:return 'RSQRT';
break;
case 12:return 'RSIN';
break;
case 13:return 'RCOS';
break;
case 14:return 'RTAN';
break;
case 15:return 'RLOG10';
break;
case 16:return 54;
break;
case 17:return 48;
break;
case 18:return 49;
break;
case 19:return 55;
break;
case 20:return 56
break;
case 21:return 'REND';
break;
case 22:return 'RSTRUCT';
break;
case 23:return 25;
break;
case 24:return "RFOR";
break;
case 25:return "RIN";
break;
case 26:return 90;
break;
case 27:return 59;
break;
case 28:return 60;
break;
case 29:return 61;
break;
case 30:return 88;
break;
case 31:return 89;
break;
case 32:return 62;
break;
case 33:return 63;
break;
case 34:return "RVOID";
break;
case 35:return 85;
break;
case 36:return 84;
break;
case 37:return 86;
break;
case 38:return 34;
break;
case 39:return 79
break;
case 40:return 45;
break;
case 41:return 22;
break;
case 42:return 28;
break;
case 43:return 29;
break;
case 44:return 'tk_cora';
break;
case 45:return "tk_corc"
break;
case 46:return 26;
break;
case 47:return 27;
break;
case 48:return 82;
break;
case 49:return 22;
break;
case 50:return 'tk_dolar';
break;
case 51:return 47;
break;
case 52:return 'tk_masmas';
break;
case 53:return 'tk_menosmenos';
break;
case 54:return 'tk_numeral';
break;
case 55:return 58;
break;
case 56:return 83;
break;
case 57:return 68;
break;
case 58:return 69;
break;
case 59:return 70;
break;
case 60:return 71;
break;
case 61:return 72;
break;
case 62:return 78;
break;
case 63:return 75;
break;
case 64:return 76;
break;
case 65:return 73;
break;
case 66:return 74;
break;
case 67:return 77;
break;
case 68:return 35;
break;
case 69:return 80;
break;
case 70:return 81;
break;
case 71:cadena="";this.begin("string");
break;
case 72:cadena+=yy_.yytext;
break;
case 73:cadena+="\"";
break;
case 74:cadena+="\n";
break;
case 75:cadena+=" ";
break;
case 76:cadena+="\t";
break;
case 77:cadena+="\\";
break;
case 78:cadena+="\'";
break;
case 79:yy_.yytext=cadena; this.popState(); return 87;
break;
case 80:return 5;
break;
case 81: 
        listaErrores.push(new Exception("Error Lexico", "No se reconoce "+yy_.yytext, yy_.yylloc.first_line,  yy_.yylloc.first_column));
        
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:println\b)/,/^(?:print\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:break\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:begin\b)/,/^(?:struct\b)/,/^(?:main\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:void\b)/,/^(?:[0-9]+(\.[0-9]+)+\b)/,/^(?:[0-9]+\b)/,/^(?:'([^\\\"]|\\.)')/,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/,/^(?:&&)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:&)/,/^(?:;)/,/^(?:\$)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:#)/,/^(?:\?)/,/^(?:\^)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:=)/,/^(?:\|\|)/,/^(?:!)/,/^(?:["])/,/^(?:[^"\\]+)/,/^(?:\\")/,/^(?:\\n)/,/^(?:\s)/,/^(?:\\t)/,/^(?:\\\\)/,/^(?:\\\\')/,/^(?:["])/,/^(?:$)/,/^(?:.)/],
conditions: {"string":{"rules":[72,73,74,75,76,77,78,79],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}